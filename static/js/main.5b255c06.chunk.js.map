{"version":3,"sources":["types.ts","services/Examples/index.ts","services/Save/index.ts","services/ExpressionContext/index.tsx","components/DragDropContextWithDispatch/index.tsx","services/InputContext/index.tsx","components/Picker/index.tsx","components/TargetPicker/index.tsx","components/MatchTypePicker/index.tsx","components/MyDraggable/components/ValueEditor/components/ValueInput/index.tsx","components/MyDraggable/components/ValueEditor/index.tsx","components/MyDraggable/components/Condition/index.tsx","services/ParenthesisMatch/index.ts","services/Match/index.ts","services/ConditionValue/index.ts","services/EvaluateExpression/index.ts","components/MyDraggable/components/Parenthesis/index.tsx","services/InstructionsContext/index.tsx","components/WithInstructions/index.tsx","components/MyDraggable/components/DraggableContent/index.tsx","components/MyDraggable/index.tsx","components/MyDroppable/services/index.ts","components/MyDroppable/index.tsx","components/Expresssion/index.tsx","components/Insertables/index.tsx","components/Inputs/components/InputName/index.tsx","components/Inputs/index.tsx","components/Providers/index.tsx","components/InstructionsModal/components/ExampleCondition/index.tsx","components/InstructionsModal/components/ExampleParenthesis/index.tsx","components/InstructionsModal/components/ExampleOperator/index.tsx","components/InstructionsModal/components/ExampleInputs/index.tsx","components/InstructionsModal/index.tsx","components/SaveLoad/index.tsx","components/Trash/index.tsx","App.tsx","serviceWorker.js","index.js"],"names":["colors","directions","targetTypes","matchTypes","examples","expression","itemType","content","conditionId","target","id","match","values","type","inputs","name","value","parenType","highlight","operatorType","loadState","state","localStorage","getItem","error","JSON","parse","newOpen","newClose","initialState","loadResult","console","log","stringify","getState","reducer","action","find","item","push","targetId","forEach","undefined","index","splice","indexes","payload","startDroppable","startIndex","endDroppable","endIndex","moved","condition","uuidv4","matchType","hasOwnProperty","toggle","Error","ExpressionContext","createContext","ExpressionProvider","props","useReducer","dispatch","Provider","children","open","DragDropContextWithDispatch","useContext","onDragEnd","result","destination","source","draggableId","droppableId","nameExists","some","input","getName","parseInt","toString","renameFailed","newInput","length","InputContext","InputProvider","Picker","handleClear","handleChange","options","text","Dropdown","onChange","e","button","floating","labeled","search","Button","onClick","icon","Icon","TargetPicker","exampleValues","map","key","setTargetId","getText","exact","partial","partialInclusive","any","none","MatchTypePicker","Object","keys","explanation","selectMatchType","ValueInput","useState","temp","setTemp","handleBlur","Input","onKeyPress","onBlur","label","labelPosition","ValueEditor","Grid","Row","Column","width","Condition","Segment","style","color","maxWidth","celled","columns","Fragment","isParenthesis","isOpenParenthesis","matches","topOfStack","closedParenthesis","getMatch","myIndex","slice","reduce","acc","cur","arr","stack","top","pop","matchIndex","isExact","string","removeQuotesFrom","getExactMatches","searchBy","results","accumulator","property","_","filter","toLowerCase","Array","isArray","itemProperty","Set","getMatches","includePartial","re","RegExp","escapeRegExp","test","isPresent","array","itemInArray","isEqual","searchString","items","simpleReturn","getItems","toFilterOut","mustHave","getAllResults","split","v","c","getToFilterOut","finalResults","mustHaveString","conditionValue","inputValue","operatorIsNot","precedence","operator","twoParameter","op","threeParameter","value1","value2","evaluateExpression","operators","isCloseParenthesis","Parenthesis","parenthesis","changeOnRightClick","doubleClickFn","isDragging","rest","Label","size","onContextMenu","preventDefault","onDoubleClick","containedExpressionValue","lower","Math","min","higher","max","containedExpression","getContainedExpressionValue","getColor","Header","as","onMouseOver","onMouseLeave","instructions","loaded","loadInstructionState","InstructionsContext","InstructionsProvider","WithInstructions","child","addInput","clear","deleteInput","editInputName","editInputValue","example","load","newAnd","newOr","newNot","newCondition","newParenthesisPair","newParenthesisOpen","newParenthesisClose","save","trash","Popup","trigger","capitalize","charAt","toUpperCase","DraggableContent","instructionType","MyDraggable","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","generateId","toStringify","MyDroppable","direction","header","height","overflow","isDraggingOver","inverted","tertiary","display","placeholder","Expression","matched","parenthesisMatch","noConditions","hasCondition","noTargets","hasTarget","newComponents","NewComponents","_InputName","setOpen","InputName","AddInputButton","DeleteInputButton","expressionDispatch","_Inputs","Inputs","Providers","ExampleCondition","handleOpen","setMatchType","setValues","newValues","addValue","deleteValue","ExampleParenthesis","ExampleOperator","setOperator","ExampleInputs","setName","setValue","InstructionsModal","modalOpen","setModalOpen","setInputs","triggerButton","circular","Modal","onClose","Content","scrolling","Description","Divider","horizontal","textAlign","stretched","List","bulleted","Item","newInputs","SaveLoad","inputDispatch","handleSave","saveResult","setItem","saveState","loadExample","exampleNumber","saveInstructionState","Checkbox","checked","handleLoad","Trash","App","className","Insertables","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b255c06.chunk.js","sourcesContent":["export enum colors {\r\n    blue = \"blue\",\r\n    red = \"red\",\r\n    yellow = \"yellow\",\r\n    orange = 'orange',\r\n    green = 'green',\r\n    purple = 'purple',\r\n    grey = 'grey'\r\n  }\r\n\r\nexport enum directions {\r\n  horizontal = 'horizontal',\r\n  vertical = 'vertical'\r\n}\r\n\r\nexport enum targetTypes {\r\n    info = \"info\",\r\n    group = \"group\",\r\n  }\r\n\r\nexport enum matchTypes {\r\n    exact = 'exact',\r\n    partial = 'partial',\r\n    partialInclusive = 'partialInclusive',\r\n    none = 'none',\r\n    any = 'any'\r\n}\r\n\r\nexport interface IMatch {\r\n    values: string[],\r\n    type: keyof typeof matchTypes\r\n}\r\n\r\nexport interface IExpression extends Array<IParenthesis | IOperator | ICondition>{}\r\n\r\n\r\nexport interface IInput {\r\n  id: string,\r\n  name: string,\r\n  value: string\r\n}\r\n\r\nexport interface IParenthesis {\r\n    itemType: 'parenthesis',\r\n    content: {\r\n        parenType: 'open' | 'close' | 'pair',\r\n        highlight?: boolean\r\n    }\r\n}\r\n\r\nexport interface IOperator {\r\n    itemType: 'operator',\r\n    content: {\r\n        operatorType: 'and' | 'or' | 'not'\r\n    }\r\n}\r\n\r\nexport interface ICondition {\r\n    itemType: 'condition',\r\n    content:  IConditionContent\r\n}\r\n\r\nexport interface IConditionContent {\r\n  conditionId: string,\r\n  open ?: boolean,\r\n  target: ITarget,\r\n  match: IMatch,\r\n}\r\n\r\nexport interface ITarget {\r\n  id: string,\r\n}\r\n\r\nexport interface INewConditionPlaceholder {\r\n  itemType: 'conditionPlaceholder'\r\n}\r\n\r\nexport interface INewParenthesis {\r\n  itemType: 'parenthesis',\r\n  content: {\r\n    parenType: 'pair' | 'open' | 'close'\r\n  }\r\n}\r\n\r\nexport interface INewComponents extends Array<INewConditionPlaceholder | IOperator | INewParenthesis>{}\r\n\r\n\r\nexport interface IAction {\r\n  type: string,\r\n  [key: string] : any\r\n}","export const examples = [ {\r\n    expression: [\r\n        {\r\n            itemType: 'condition',\r\n            content: {\r\n              conditionId: `1`,\r\n              target: {\r\n                id: `1`,\r\n               },\r\n              match: {\r\n                values: [`morning`],\r\n                type: `exact`\r\n              }\r\n            },\r\n          },\r\n    ],\r\n    inputs: [\r\n        {\r\n            id: '1',\r\n            name: 'Time',\r\n            value: 'morning'\r\n        }\r\n    ]\r\n},\r\n {\r\n    expression: [\r\n        {\r\n            itemType: 'parenthesis',\r\n            content: {\r\n                parenType: 'open',\r\n                highlight: false,\r\n            }\r\n          },\r\n        {\r\n            itemType: 'condition',\r\n            content: {\r\n              conditionId: `1`,\r\n              target: {\r\n                id: `1`,\r\n               },\r\n              match: {\r\n                values: [`Small`],\r\n                type: `exact`\r\n              }\r\n            },\r\n          },\r\n          {\r\n            itemType: 'operator',\r\n            content: {\r\n              operatorType: 'or'\r\n            }\r\n          },\r\n          {\r\n            itemType: 'condition',\r\n            content: {\r\n              conditionId: `2`,\r\n              target: {\r\n                id: `1`,\r\n               },\r\n              match: {\r\n                values: [`Fast`],\r\n                type: `exact`\r\n              }\r\n            },\r\n          },\r\n          {\r\n            itemType: 'operator',\r\n            content: {\r\n              operatorType: 'or'\r\n            }\r\n          },\r\n          {\r\n            itemType: 'condition',\r\n            content: {\r\n              conditionId: `3`,\r\n              target: {\r\n                id: `1`,\r\n               },\r\n              match: {\r\n                values: [`Cheap`],\r\n                type: `exact`\r\n              }\r\n            },\r\n          },\r\n          {\r\n            itemType: 'parenthesis',\r\n            content: {\r\n                parenType: 'close',\r\n                highlight: false,\r\n            }\r\n          }\r\n    ],\r\n    inputs: [\r\n        {\r\n            id: '1',\r\n            name: 'Size',\r\n            value: 'Large'\r\n        },\r\n        {\r\n            id: '2',\r\n            name: 'Speed',\r\n            value: 'Slow'\r\n        },\r\n        {\r\n            id: '3',\r\n            name: 'Cost',\r\n            value: 'High'\r\n        }\r\n    ]\r\n},\r\n {\r\n    expression: [\r\n        {\r\n            itemType: 'condition',\r\n            content: {\r\n              conditionId: `1`,\r\n              target: {\r\n                id: `1`,\r\n               },\r\n              match: {\r\n                values: [`Happy`, `Glad`, `Joyous`, `Merry`],\r\n                type: `partial`\r\n              }\r\n            },\r\n          },\r\n          {\r\n            itemType: 'operator',\r\n            content: {\r\n              operatorType: 'and'\r\n            }\r\n          },\r\n          {\r\n            itemType: 'operator',\r\n            content: {\r\n              operatorType: 'not'\r\n            }\r\n          },\r\n        {\r\n            itemType: 'parenthesis',\r\n            content: {\r\n                parenType: 'open',\r\n                highlight: false,\r\n            }\r\n          },\r\n          {\r\n            itemType: 'condition',\r\n            content: {\r\n              conditionId: `2`,\r\n              target: {\r\n                id: `1`,\r\n               },\r\n              match: {\r\n                values: [`Unhappy`, `Sad`, `Down`, `Upset`],\r\n                type: `partial`\r\n              }\r\n            },\r\n          },\r\n          {\r\n            itemType: 'operator',\r\n            content: {\r\n              operatorType: 'or'\r\n            }\r\n          },\r\n          {\r\n            itemType: 'condition',\r\n            content: {\r\n              conditionId: `3`,\r\n              target: {\r\n                id: `1`,\r\n               },\r\n              match: {\r\n                values: [`Happy`],\r\n                type: `exact`\r\n              }\r\n            },\r\n          },\r\n          {\r\n            itemType: 'parenthesis',\r\n            content: {\r\n                parenType: 'close',\r\n                highlight: false,\r\n            }\r\n          },\r\n    ],\r\n    inputs: [\r\n        {\r\n            id: '1',\r\n            name: 'Mood',\r\n            value: 'happy'\r\n        }\r\n    ]\r\n}]","import { IExpression, IInput } from '../../types';\r\n\r\nexport const saveState = ({\r\n  expression,\r\n  inputs\r\n  } :{\r\n  expression: IExpression,\r\n  inputs: IInput[]\r\n  }) => {\r\n  try {\r\n    localStorage.setItem('state', JSON.stringify({expression, inputs}));\r\n    return true;\r\n  } catch (error) {\r\n    return {\r\n      error\r\n    }\r\n  }\r\n}\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const state = localStorage.getItem('state')\r\n    if (state === null) {\r\n      return {\r\n        error: `No state saved`\r\n      };\r\n    }\r\n    return JSON.parse(state);\r\n  } catch (error) {\r\n      return {\r\n        error\r\n      };\r\n  }\r\n};\r\n\r\nexport const saveInstructionState = (instructions: boolean) => {\r\n  try {\r\n    localStorage.setItem('instructions', JSON.stringify(instructions));\r\n    return true;\r\n  } catch (error) {\r\n    return {\r\n      error\r\n    }\r\n  }\r\n}\r\n\r\nexport const loadInstructionState = () =>{\r\ntry {\r\n  const instructions = localStorage.getItem('instructions')\r\n  if (instructions === null) {\r\n    return {\r\n      error: `No instructions state saved`\r\n    };\r\n  }\r\n  return JSON.parse(instructions);\r\n} catch (error) {\r\n    return {\r\n      error\r\n    };\r\n}\r\n};\r\n","import React, { createContext, useReducer } from 'react';\r\nimport { IAction, IParenthesis } from '../../types';\r\nimport uuidv4 from 'uuid/v4';\r\nimport { examples } from '../Examples'\r\nimport { loadState } from '../../services/Save';\r\n\r\nconst getState = () => {\r\n  const loadResult = loadState();\r\n  if (!!loadResult.error) {\r\n      console.error(loadResult.error)\r\n      const { expression } = examples[0];\r\n      return expression;\r\n  } else {\r\n      console.log(JSON.stringify(loadResult))\r\n      return loadResult.expression\r\n  }        \r\n}\r\n\r\nconst newOpen = {\r\n  itemType: 'parenthesis',\r\n  content: {\r\n    parenType: 'open',\r\n    highlight: false,\r\n  }\r\n}\r\n\r\nconst newClose = {\r\n  itemType: 'parenthesis',\r\n  content: {\r\n    parenType: 'close',\r\n    highlight: false,\r\n  }\r\n}\r\n\r\nconst initialState: any = {\r\n  expression: getState()\r\n  };\r\n\r\n  let reducer = (state: any, action: IAction) => {\r\n    switch (action.type) {\r\n      case 'addValue': {\r\n        const { conditionId } = action;\r\n        const expression = [...state.expression];\r\n        const condition = expression.find((item: any) => item.content.conditionId && item.content.conditionId === conditionId);\r\n\r\n        condition.content.match.values.push('');\r\n\r\n        return {\r\n          ...state,\r\n          expression\r\n        }\r\n      }\r\n      case 'deleteTarget': {\r\n        const targetId = action.id;\r\n        const expression = [...state.expression];\r\n        expression.forEach(item => {\r\n          if (item.itemType === 'condition' && item.content.target.id === targetId) {\r\n            item.content.target.id = undefined;\r\n          }\r\n        })\r\n\r\n        return {\r\n          ...state,\r\n          expression\r\n        }\r\n      }\r\n      case 'deleteValue': {\r\n        const { conditionId, index } = action;\r\n        const expression = [...state.expression];\r\n        const condition = expression.find((item: any) => item.content.conditionId && item.content.conditionId === conditionId);\r\n\r\n        condition.content.match.values.splice(index, 1);\r\n\r\n        return {\r\n          ...state,\r\n          expression\r\n        }\r\n      }\r\n      case 'highlight': {\r\n        const { indexes } = action;\r\n        const expression = [...state.expression];\r\n\r\n        //clear prior highlights\r\n        expression.forEach((item: IParenthesis) => item.content.highlight && (item.content.highlight = false))\r\n\r\n        //highlight requested match\r\n        indexes.forEach((index: number) => {\r\n          expression[index].content.highlight = true\r\n        })\r\n\r\n        return {\r\n          ...state,\r\n          expression\r\n        }\r\n      }\r\n      case 'load': {\r\n        const { expression } = action;\r\n        return {\r\n          ...state,\r\n          expression\r\n        }\r\n      }\r\n      case 'setValue': {\r\n        const { conditionId, index, value } = action;\r\n        const expression = [...state.expression];\r\n        const condition = expression.find((item: any) => item.content.conditionId && item.content.conditionId === conditionId);\r\n        condition.content.match.values[index] = value;\r\n\r\n        return {\r\n          ...state,\r\n          expression\r\n        }\r\n      }\r\n      case 'delete': {\r\n        const { index } = action.payload;\r\n        const expression = [...state.expression];\r\n        expression.splice(index, 1);\r\n        return {\r\n          ...state,\r\n          expression\r\n        }\r\n      }\r\n      case 'drag': {\r\n        const {\r\n          item,\r\n          startDroppable,\r\n          startIndex,\r\n          endDroppable,\r\n          endIndex\r\n        } = action.payload;\r\n        const expression = [...state.expression];\r\n        if (startDroppable === 'expression' && endDroppable === 'expression') {\r\n          const moved = expression.splice(startIndex, 1)[0];\r\n          expression.splice(endIndex, 0, moved)\r\n          return {\r\n            ...state,\r\n            expression\r\n          }\r\n        } else if (startDroppable === 'expression' && endDroppable === 'trash'){\r\n          const { startIndex } = action.payload;\r\n          const expression = [...state.expression];\r\n          expression.splice(startIndex, 1);\r\n          return {\r\n            ...state,\r\n            expression\r\n          }\r\n        } else if (startDroppable === 'newComponents' && endDroppable === 'expression') {\r\n          if (item.itemType === 'parenthesis' && item.content.parenType === 'pair') {\r\n            expression.splice(endIndex, 0, newOpen, newClose)\r\n          } else if (item.itemType === 'conditionPlaceholder') {\r\n            const condition = {\r\n              itemType: 'condition',\r\n              content: {\r\n                conditionId: uuidv4(),\r\n                target: {\r\n                  name: null,\r\n                  type: null\r\n                },\r\n                match: {\r\n                  values: [],\r\n                  type: null\r\n                }\r\n              },\r\n            }\r\n            expression.splice(endIndex, 0, condition);\r\n          } else {\r\n            expression.splice(endIndex, 0, item);\r\n          }\r\n            return {\r\n              ...state,\r\n              expression\r\n            }\r\n;\r\n        } else {\r\n          return state;\r\n        }\r\n        }\r\n      case 'insertNew': {\r\n        const { item } = action.payload;\r\n        const { itemType } = item;\r\n        const expression = [...state.expression]\r\n        if (itemType === 'parenthesis' && item.content.parenType === 'pair' ) {\r\n\r\n          expression.splice(0, 0, newOpen, newClose)\r\n          return {\r\n            ...state,\r\n            expression\r\n          }\r\n        } else if (itemType === 'conditionPlaceholder') {\r\n          const condition = {\r\n            itemType: 'condition',\r\n            content: {\r\n              conditionId: uuidv4(),\r\n              target: {\r\n                id: null\r\n              },\r\n              match: {\r\n                values: [],\r\n                type: null\r\n              }\r\n            },\r\n        }\r\n        expression.splice(0,0, condition)\r\n        return {\r\n          ...state,\r\n          expression\r\n        }\r\n      } else {\r\n        expression.splice(0,0,item)\r\n        return {\r\n          ...state,\r\n          expression\r\n        }\r\n      }\r\n      }\r\n      case 'matchTypeSelect':{\r\n        const {\r\n          conditionId,\r\n          matchType\r\n        } = action;\r\n\r\n        const expression = [...state.expression];\r\n        const condition = expression.find((item: any) => item.content.conditionId && item.content.conditionId === conditionId);\r\n\r\n        condition.content.match.type = matchType;\r\n\r\n        return {\r\n          ...state,\r\n          expression\r\n        }\r\n      }\r\n      case 'highlightCancel': {\r\n        const expression = [...state.expression];\r\n        expression.forEach((item:any) => {\r\n          if (item.content.hasOwnProperty('highlight')) {\r\n            item.content.highlight = false;\r\n          }\r\n        })\r\n        return {\r\n          ...state,\r\n          expression\r\n        }\r\n      }\r\n      case 'targetSelect' : {\r\n        const { conditionId, targetId } = action;\r\n        const expression = [...state.expression];\r\n        const condition = expression.find((item: any) => item.content.conditionId && item.content.conditionId === conditionId);\r\n\r\n        condition.content.target.id = targetId;\r\n\r\n        return {\r\n          ...state,\r\n          expression\r\n        }\r\n      }\r\n      case 'toggle': {\r\n          const { index } = action.payload;\r\n          let target = state.expression[index];\r\n          target = toggle(target);\r\n          const expression = [...state.expression];\r\n          expression[index] = target;\r\n          return {\r\n              ...state,\r\n              expression\r\n            };\r\n      }\r\n      default:\r\n        throw new Error();\r\n    }\r\n  }\r\n\r\n  const ExpressionContext = createContext(initialState);\r\n  const ExpressionProvider = (props: any) => {\r\n      const [state, dispatch] = useReducer(reducer, initialState);\r\nreturn (\r\n    <ExpressionContext.Provider value={{state, dispatch}}>\r\n    {props.children}\r\n  </ExpressionContext.Provider>\r\n)}\r\n\r\n  export { ExpressionContext, ExpressionProvider }\r\n\r\n  const toggle = (target: any) => {\r\n      const { itemType, content } = target;\r\n      if (itemType === 'parenthesis') {\r\n        const { parenType } = content;\r\n            if (parenType === 'open') {\r\n                return {\r\n                  ...target,\r\n                    content: {\r\n                      ...content,\r\n                      parenType: 'close'\r\n                    }\r\n                  }\r\n            } else if (parenType === 'close') {\r\n                return {\r\n                  ...target,\r\n                  content: {\r\n                    ...content,\r\n                    parenType: 'open'\r\n                  }\r\n            }\r\n          }\r\n    } else if (itemType === 'operator') {\r\n        let { operatorType } = content;\r\n\r\n        if (operatorType === 'and') operatorType = 'or';\r\n        else if (operatorType === 'or') operatorType = 'not';\r\n        else if ( operatorType === 'not') operatorType = 'and';\r\n        return {\r\n            ...target,\r\n            content: {\r\n                ...content,\r\n                operatorType\r\n            }\r\n        }\r\n      } else if (itemType === 'condition') {\r\n        const { content } = target;\r\n        const open = content.open ? content.open : false;\r\n          return {\r\n            ...target,\r\n            content: {\r\n                ...content,\r\n                open: !open\r\n            }\r\n        };\r\n      } else return target;\r\n\r\n  }\r\n","import React, { useContext } from 'react';\r\nimport { ExpressionContext } from '../../services/ExpressionContext';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\n\r\nconst DragDropContextWithDispatch = (props: any) => {\r\n    const { dispatch } = useContext(ExpressionContext);\r\n\r\n    return (\r\n      <DragDropContext\r\n      onDragEnd={(result: DropResult) => {\r\n        const { destination, source, draggableId } = result;\r\n        if (source.droppableId === 'expression') dispatch({type: 'highlightCancel'})\r\n        const { droppableId: startDroppable, index: startIndex } = source;\r\n        const { droppableId: endDroppable = null, index: endIndex = null, } = destination || {};\r\n        const item = JSON.parse(JSON.parse(draggableId).item);\r\n\r\n\r\n        dispatch({\r\n          type: 'drag',\r\n          payload: {\r\n            item,\r\n            startDroppable,\r\n            startIndex,\r\n            endDroppable,\r\n            endIndex\r\n          }\r\n        })\r\n      }}\r\n      dispatch={dispatch}\r\n      {...props}\r\n      />\r\n    )\r\n  }\r\n\r\nexport default DragDropContextWithDispatch;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport uuidv4 from 'uuid/v4';\r\nimport { IAction, IInput } from '../../types';\r\nimport { examples } from '../Examples'\r\nimport { loadState } from '../../services/Save';\r\n\r\nconst getState = () => {\r\n  const loadResult = loadState();\r\n  if (!!loadResult.error) {\r\n      console.error(loadResult.error)\r\n      const { inputs } = examples[0];\r\n      return inputs;\r\n  } else {\r\n      console.log(JSON.stringify(loadResult))\r\n      return loadResult.inputs\r\n  }        \r\n}\r\n\r\nconst nameExists = (inputs: IInput[], name: string) => inputs.some((input: IInput) => input.name === name)\r\n\r\nconst getName = (inputs: IInput[], name: string) => {    \r\n    if (nameExists(inputs, name)) {\r\n        name = getName(inputs, (parseInt(name) + 1).toString())\r\n    } \r\n    return name;       \r\n}\r\n\r\nconst initialState: any = {\r\n    inputs: getState(),\r\n    renameFailed: false\r\n}\r\n\r\n\r\n  let reducer = (state: any, action: IAction) => {\r\n    switch (action.type) {\r\n      case 'delete':{\r\n          const { index } = action;\r\n          const inputs = [...state.inputs];\r\n          inputs.splice(index, 1);\r\n          return {\r\n              ...state,\r\n              inputs\r\n          }\r\n      }\r\n      case 'load':{\r\n        const { inputs } = action;\r\n        return {\r\n            ...state,\r\n            inputs\r\n        };\r\n    }\r\n      case 'new':{\r\n        const newInput = {\r\n            id: uuidv4(),\r\n            name: getName(state.inputs, (state.inputs.length + 1).toString()),\r\n            value: ''\r\n        }\r\n        const inputs = [...state.inputs];\r\n        inputs.push(newInput);\r\n        return {\r\n            ...state,\r\n            inputs\r\n        };\r\n    }\r\n      case 'rename':{\r\n          const { index, name } = action;\r\n          \r\n          if (nameExists(state.inputs, name)) {\r\n              return {\r\n                  ...state,\r\n                  renameFailed: true\r\n              }\r\n          }\r\n          const inputs = [...state.inputs];\r\n          const target = {...state.inputs[index]};\r\n          target.name = name;\r\n          inputs[index] = target;\r\n\r\n          return {\r\n              ...state,\r\n              inputs,\r\n              renameFailed: false\r\n          }\r\n      }\r\n      case 'save':{\r\n          const { index, value } = action;\r\n          const inputs = [...state.inputs];\r\n          const target = {...state.inputs[index]};\r\n          target.value = value;\r\n          inputs[index] = target;\r\n          return {\r\n              ...state,\r\n              inputs\r\n          }\r\n      }\r\n      default:\r\n        throw new Error();\r\n    }\r\n  }\r\n\r\n  const InputContext = createContext(initialState);\r\n  const InputProvider = (props: any) => {\r\n      const [state, dispatch] = useReducer(reducer, initialState);\r\nreturn (\r\n    <InputContext.Provider value={{state, dispatch}}>\r\n    {props.children}\r\n  </InputContext.Provider>\r\n)}\r\n\r\n  export { InputContext, InputProvider }","import React, { Fragment } from 'react';\r\nimport { \r\n    Button,\r\n    Dropdown,\r\n    Icon\r\n } from 'semantic-ui-react';\r\n\r\ninterface IOption {\r\n    key: string,\r\n    text: string,\r\n    value: string\r\n}\r\n\r\nconst Picker = ({\r\n    handleClear,\r\n    handleChange,\r\n    options,\r\n    text\r\n}: {\r\n    handleClear : () => void,\r\n    handleChange : (argt: string) => void,\r\n    options: IOption[],\r\n    text?: string\r\n}) => \r\n<Fragment>\r\n    <Dropdown\r\n    onChange={(e, {value}) => typeof(value) === 'string' && handleChange(value)}\r\n    button\r\n    floating\r\n    labeled\r\n    options={options}\r\n    search\r\n    text={text}\r\n  />\r\n  <Button \r\n    onClick={() => handleClear()}\r\n    icon>\r\n    <Icon name='delete'/>\r\n    </Button>\r\n</Fragment>\r\n\r\nexport default Picker;","import React, { \r\n    useContext \r\n} from 'react';\r\nimport { InputContext, } from '../../services/InputContext';\r\nimport { ExpressionContext } from '../../services/ExpressionContext';\r\nimport Picker from '../Picker';\r\nimport { \r\n    ICondition, \r\n    IInput,\r\n    IOperator,\r\n    IParenthesis\r\n } from '../../types';\r\n\r\nconst TargetPicker = ({\r\n    conditionId,\r\n    exampleValues\r\n}: {\r\n    conditionId ?: string\r\n    exampleValues ?: {\r\n        targetId ?: string,\r\n        setTargetId : (targetId: string | undefined) => void,\r\n    }\r\n}) => {\r\n    const { dispatch, state } = useContext(ExpressionContext);\r\n    const { expression } = state;\r\n    const { inputs } = useContext(InputContext).state;\r\n    const targetId = !exampleValues\r\n    ? expression.find((item: ICondition | IParenthesis |IOperator) => {\r\n        if (item.itemType === 'condition') {\r\n            if (item.content.conditionId === conditionId) {\r\n                return true\r\n            } else return false;\r\n        } else return false;             \r\n}).content.target.id\r\n    : exampleValues && exampleValues.targetId;\r\n\r\n    const text = targetId \r\n    ? inputs.find((input: IInput) => input.id === targetId).name \r\n    : `no target`\r\n\r\n    const options = inputs.map((input: IInput) => {\r\n        const { name, id } = input;\r\n        return {\r\n            key: name,\r\n            text: name,\r\n            value: id\r\n        }\r\n    })\r\n    \r\n    const handleChange = (targetId: string) => \r\n    conditionId \r\n    ? dispatch({\r\n        type: 'targetSelect',\r\n        conditionId,\r\n        targetId\r\n    })\r\n    : exampleValues && exampleValues.setTargetId(targetId)\r\n\r\n    const handleClear = () =>\r\n    conditionId \r\n    ? dispatch({\r\n        type: 'targetSelect', \r\n        conditionId,\r\n        targetId: undefined\r\n        })\r\n    : exampleValues && exampleValues.setTargetId(targetId)\r\n\r\n    return   (\r\n    <Picker\r\n        handleChange={handleChange}\r\n        handleClear={handleClear}\r\n        options={options}\r\n        text={text}\r\n      />\r\n)}\r\n\r\nexport default TargetPicker;\r\n","import React, { useContext, Fragment } from 'react';\r\nimport { ExpressionContext } from '../../services/ExpressionContext';\r\nimport Picker from '../Picker';\r\nimport { \r\n    matchTypes,\r\n    ICondition, \r\n    IParenthesis, \r\n    IOperator \r\n} from '../../types';\r\n\r\nconst getText : { [key: string] : string} = {\r\n    exact: 'Exact',\r\n    partial: 'Partial',\r\n    partialInclusive: 'Inclusive',\r\n    any: 'Any value',\r\n    none: 'No value'\r\n}\r\n\r\nconst MatchTypePicker = ({\r\n    conditionId,\r\n    exampleValues\r\n}: {\r\n    conditionId?: string\r\n    exampleValues ?: {\r\n        matchType ?: string,\r\n        selectMatchType : (matchType: string | undefined) => void,\r\n\r\n    }\r\n}) => {\r\n    const { dispatch, state } = useContext(ExpressionContext);\r\n    const { expression } = state;\r\n    const matchType = !exampleValues ? expression.find((item: ICondition | IParenthesis |IOperator) => {\r\n            if (item.itemType === 'condition') {\r\n                if (item.content.conditionId === conditionId) {\r\n                    return true\r\n                } else return false;\r\n            } else return false;             \r\n    }).content.match.type\r\n    : exampleValues.matchType\r\n    const text = matchType \r\n    ? getText[matchType] || matchType \r\n    : `no selection made`\r\n\r\n    const options = Object.keys(matchTypes).map((matchType: string) => {\r\n        return {\r\n            key: matchType,\r\n            text: getText[matchType] || matchType,\r\n            value: matchType\r\n        }\r\n    })\r\n\r\n    const explanation : { [key: string] : string} = {\r\n        exact: 'Target value must exactly match one of the provided values (case insensitive).',\r\n        partial: 'Whole target value must partially match at least one of the provided values.',\r\n        partialInclusive: 'Part of target value must partially match at least one of the provided values.',\r\n        none: 'No value entered in target.',\r\n        any: 'Any value entered in target.'\r\n    }\r\n\r\n    const handleChange = (matchType: string) => \r\n    conditionId ?\r\n      dispatch({\r\n            type: 'matchTypeSelect',\r\n            conditionId,\r\n            matchType\r\n        })\r\n     : exampleValues && exampleValues.selectMatchType(matchType)\r\n\r\n    const handleClear = () =>\r\n    conditionId ?\r\n    dispatch({\r\n        type: 'matchTypeSelect', \r\n        conditionId,\r\n        matchType: undefined\r\n        })\r\n        : exampleValues && exampleValues.selectMatchType(undefined)\r\n\r\n    return   (\r\n        <Fragment>\r\n        <Picker \r\n        handleChange={handleChange}\r\n        handleClear={handleClear}\r\n        options={options}\r\n        text={text}\r\n        />\r\n        {explanation[matchType] && explanation[matchType]}\r\n        </Fragment>\r\n)}\r\n\r\nexport default MatchTypePicker;","import React, { useState} from 'react';\r\nimport { Icon, Input, Button } from 'semantic-ui-react';\r\n\r\nconst ValueInput = ({\r\n    conditionId,\r\n    dispatch,\r\n    value,\r\n    index\r\n}: {\r\n    dispatch: ({type, conditionId, index, value}:{type:string, conditionId: string, index: number, value?: string}) => void,\r\n    conditionId: string,\r\n    value: string,\r\n    index: number\r\n}) => {\r\n    const [temp, setTemp] = useState(value);\r\n    const handleBlur = (value:string) => dispatch({type: 'setValue', conditionId, index, value})\r\n    return (\r\n        <Input\r\n        onKeyPress={({key}:{key: string}) => {\r\n            if (key === 'Enter') {\r\n                temp !== value && handleBlur(temp)\r\n            }\r\n        }}\r\n        onBlur={(e: any) => handleBlur(e.target.value)}\r\n        onChange={(e) => setTemp(e.target.value)}        \r\n        label={<Button icon onClick={() => dispatch({type:'deleteValue', conditionId, index})}><Icon name='delete'/></Button>}\r\n        labelPosition='right'\r\n        value={temp}\r\n        />\r\n)}\r\n\r\nexport default ValueInput;\r\n","import React, { useContext} from 'react';\r\nimport { ExpressionContext } from '../../../../services/ExpressionContext';\r\nimport { Grid, Button, Icon} from 'semantic-ui-react';\r\nimport ValueInput from './components/ValueInput';\r\nimport { \r\n    ICondition, \r\n    IOperator, \r\n    IParenthesis\r\n} from '../../../../types';\r\n\r\nconst ValueEditor = ({conditionId}:{conditionId: string}) => {\r\n    const { dispatch } = useContext(ExpressionContext); \r\n    const { expression } = useContext(ExpressionContext).state;\r\n    const { values } = expression.find((item: ICondition | IParenthesis |IOperator) => {\r\n        if (item.itemType === 'condition') {\r\n            if (item.content.conditionId === conditionId) {\r\n                return true\r\n            } else return false;\r\n        } else return false;             \r\n}).content.match;\r\n\r\nreturn (\r\n<Grid.Row>\r\n<Grid.Column width={3}>\r\nValues\r\n<Button icon onClick={() => dispatch({type: 'addValue', conditionId})}><Icon name='add'/></Button>\r\n</Grid.Column>\r\n<Grid.Column>\r\n    {values \r\n    ? values.map((value: string, index: number) => \r\n        <div key={`valueEditorValue` + index.toString()}>{index + 1}. \r\n        <ValueInput \r\n        dispatch={dispatch}\r\n        conditionId={conditionId}\r\n        value={value}\r\n        index={index}\r\n        />\r\n        </div>)\r\n    : `No values`}\r\n</Grid.Column>\r\n</Grid.Row>\r\n    )\r\n} \r\n\r\nexport default ValueEditor;\r\n\r\n","import React, { useContext } from 'react';\r\nimport { IConditionContent } from '../../../../types';\r\nimport { Grid, Segment, } from 'semantic-ui-react';\r\nimport TargetPicker from '../../../TargetPicker';\r\nimport MatchTypePicker from '../../../MatchTypePicker';\r\nimport ValueEditor from '../ValueEditor';\r\nimport { InputContext } from '../../../../services/InputContext';\r\nimport { IInput } from '../../../../types';\r\n\r\n\r\nconst Condition = ({\r\n    condition\r\n}: {\r\n    condition: IConditionContent\r\n}) => {\r\n    const { conditionId, target, match, open } = condition;\r\n    const values  = match ? match.values : undefined;\r\n    const { inputs } = useContext(InputContext).state;\r\n    const input = target && inputs.find((input: IInput) => input.id === target.id)\r\nreturn open \r\n? (\r\n    <Segment style={{\r\n        color: 'black',\r\n        maxWidth: 500\r\n        }}>\r\n    <Grid celled columns={2}>\r\n        <Grid.Row>\r\n            <Grid.Column width={3}>\r\n            Target\r\n            </Grid.Column>\r\n            <Grid.Column>\r\n            <TargetPicker conditionId={conditionId}/>\r\n            </Grid.Column>\r\n    </Grid.Row>\r\n    <Grid.Row>\r\n        <Grid.Column width={3}>Match Type</Grid.Column>\r\n        <Grid.Column>\r\n        <MatchTypePicker conditionId={conditionId}/>\r\n        </Grid.Column>\r\n    </Grid.Row>\r\n        <ValueEditor conditionId={conditionId}/>  \r\n    </Grid>\r\n    </Segment>\r\n)\r\n: (\r\n    <React.Fragment>\r\n    <div>Target: {input\r\n    ? input.name\r\n    : `No target`}</div>\r\n    <div>Match Type: {match && match.type && match.type}</div>\r\n    <div>Values: {match && \r\n    match.type && \r\n    (match.type === 'any' || match.type === 'none') \r\n    ? 'N/A'\r\n    : !!values ? \r\n    values\r\n    .map((\r\n        value: string, \r\n        index: number\r\n        ) => {\r\n            if (index < 5) {\r\n            return <div key={`value` + index.toString()}>\r\n                {value}\r\n            </div>\r\n            }\r\n            if (index === 5) {\r\n                return <div key={`value` + index.toString()}>...</div>\r\n            }\r\n            return null; \r\n        }) \r\n    : 'no values'}\r\n    </div> \r\n    </React.Fragment>) \r\n}\r\n\r\nexport default Condition;\r\n\r\n\r\n\r\n\r\n","import { IExpression, IParenthesis, IOperator, ICondition } from '../../types';\r\n\r\ninterface IParenthesisWithIndex extends IParenthesis {\r\n  index: number,\r\n}\r\n\r\nconst isParenthesis = (item: IParenthesis | IOperator | ICondition) =>\r\nitem.itemType === 'parenthesis'\r\n\r\nconst isOpenParenthesis = (item: IParenthesis) =>\r\nitem.content.parenType === 'open'\r\n\r\nconst matches = (topOfStack: IParenthesisWithIndex, closedParenthesis: IParenthesis) =>\r\ntopOfStack.content.parenType === 'open' &&\r\nclosedParenthesis.content.parenType === 'close'\r\n\r\nexport const parenthesisMatch = (expression: IExpression) =>\r\n!expression\r\n? true\r\n: !(!!expression\r\n  .reduce((stack: IParenthesisWithIndex[], cur, index) => {\r\n  if (isParenthesis(cur)) {\r\n    if (isOpenParenthesis(cur as IParenthesis)) {\r\n      stack.push({...cur, index} as IParenthesisWithIndex)\r\n      return stack;\r\n    } else {\r\n      //handling close parenthesis\r\n      if (stack.length === 0) {\r\n        stack.push({...cur, index} as IParenthesisWithIndex)\r\n        return stack;\r\n      }\r\n      const top = stack.pop();\r\n      //if they do match, top is out of the stack & cur does not get added\r\n      if (!matches(top as IParenthesisWithIndex, cur as IParenthesis)) {\r\n        //if not match, push top back in\r\n        stack.push(top as IParenthesisWithIndex);\r\n        stack.push({...cur, index} as IParenthesisWithIndex)\r\n      }\r\n    }\r\n  }\r\n  return stack;\r\n}, []).length)\r\n\r\nexport const getMatch = (myIndex: number, expression: IExpression) => {\r\n  if (myIndex > expression.length -1) {\r\n    //console.log(`myIndex ${myIndex} greater than expression length ${expression.length}`, expression)\r\n    return undefined;\r\n  }\r\n  if (!isParenthesis(expression[myIndex])) {\r\n    //console.log(`expression[${myIndex}] is not a parenthesis `, expression[myIndex])\r\n    return undefined;\r\n  }\r\n\r\n return expression.slice(0).reduce((acc: {\r\n    stack: IParenthesisWithIndex[]\r\n    matchIndex?: number\r\n  }, cur, index, arr) => {\r\n    if (isParenthesis(cur)) {\r\n      if (isOpenParenthesis(cur as IParenthesis)) {\r\n        acc.stack.push({...cur, index} as IParenthesisWithIndex)\r\n        return acc;\r\n      } else {\r\n        //handling close parenthesis\r\n        if (acc.stack.length === 0) {\r\n          acc.stack.push({...cur, index} as IParenthesisWithIndex)\r\n          return acc;\r\n        }\r\n        const top = acc.stack.pop();\r\n\r\n        //if they do match, top is out of the stack & cur does not get added\r\n        if (!matches(top as IParenthesisWithIndex, cur as IParenthesis)) {\r\n          //if not match, push top back in\r\n          acc.stack.push(top as IParenthesisWithIndex);\r\n          acc.stack.push({...cur, index} as IParenthesisWithIndex)\r\n        } else {\r\n          if (myIndex === index) {\r\n            !!top && (acc.matchIndex = top.index);\r\n            //break out of reduce by mutating 4th argument\r\n            arr.splice(1)\r\n          }\r\n          if (!!top && myIndex === top.index) {\r\n            acc.matchIndex = index;\r\n            //break out of reduce by mutating 4th argument\r\n            arr.splice(1)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return acc;\r\n  }, {\r\n    stack: [],\r\n    matchIndex: undefined\r\n  }).matchIndex\r\n}\r\n","import _ from 'lodash';\r\n\r\nconst isExact = (string: string) =>\r\n!!(string.slice(0,1) === '\"' && string.slice(-1) === '\"')\r\n\r\n\r\nconst removeQuotesFrom = (string: string) => {\r\n  string = string.slice(1, string.length);\r\n  return string.slice(0, -1);\r\n}\r\n\r\n//returns all objects in target array that exactly match value string\r\n//either on .name property or any value in tags[string]\r\nconst getExactMatches = (value: string, target: any[], searchBy: string[]) => {\r\n    const results = searchBy.reduce((accumulator: any, property) => {\r\n\r\n      const isMatch = (item: any) => {\r\n      if (typeof(item) === 'string') {\r\n        return item.toLowerCase() === value.toLowerCase();\r\n      } else if (!item[property]) {\r\n          return;\r\n        } else if (Array.isArray(item[property])) {\r\n          return item[property].some((itemProperty: string) =>\r\n            itemProperty.toLowerCase() === value.toLowerCase())\r\n        } else {\r\n          return item[property].toLowerCase() === value.toLowerCase();\r\n        }\r\n      }\r\n\r\n      const thisResult = _.filter(target, isMatch)\r\n      thisResult.forEach((result: any) => accumulator.push(result));\r\n      return accumulator;\r\n    }, [])\r\n\r\n    return [...new Set([\r\n      ...results\r\n    ])]\r\n}\r\n\r\n//returns all objects in target array that match value string\r\n//either on .name property or any value in tags[string]\r\nconst getMatches = (\r\n  value: string, \r\n  target: any[], \r\n  searchBy: string[],\r\n  includePartial?: boolean\r\n  ) => {\r\n  const re = new RegExp(_.escapeRegExp(value), 'i');\r\n  \r\n  const results = searchBy.reduce((accumulator: any[], property) => {\r\n\r\n    const isMatch = (item: any) => {\r\n      \r\n      if (includePartial) {\r\n        const re2 = new RegExp(_.escapeRegExp(item), 'i');\r\n       if (re2.test(value)) return true;\r\n      }\r\n      if (typeof(item) === 'string') {\r\n        return re.test(item)\r\n      } else if (!item[property]) {\r\n        return;\r\n      } else if (Array.isArray(item[property])) {\r\n        return item[property].some((itemProperty: string) => re.test(itemProperty))\r\n      } else {\r\n        return re.test(item[property]);\r\n      }\r\n    }\r\n\r\n\r\n    const thisResult = _.filter(target, isMatch)\r\n    thisResult.forEach(result => accumulator.push(result));\r\n    return accumulator;\r\n  }, [])\r\n\r\n\r\n  \r\n  return [...new Set([\r\n    ...results\r\n  ])]\r\n}\r\n\r\n//In the app, value is a searchstring provided by the user\r\n//here, it's input that we're referring to\r\n//must change the evaluation flow\r\nconst getAllResults = (\r\n  values: string[], \r\n  items: any[], \r\n  searchBy: string[],\r\n  includePartial ?: boolean\r\n  ) => values\r\n.reduce((accumulator: {\r\n    mustHave: string[],\r\n    results: any[],\r\n    toFilterOut: any[]\r\n}, value) => {\r\n  //user requests exact value, but is not a must have\r\n  if (isExact(value)) {\r\n\r\n    value = removeQuotesFrom(value);\r\n  accumulator.results = [...new Set([\r\n    ...accumulator.results,\r\n    ...getExactMatches(value, items, searchBy)\r\n  ])];\r\n  }\r\n  //a - in front of the string indicates we are excluding matches of that value\r\n  else if (value.slice(0, 1) === '-') {\r\n    accumulator.toFilterOut.push(value.slice(1, value.length))\r\n  } else {\r\n   if (value.slice(0, 1) === '+') {\r\n      value = value.slice(1, value.length)\r\n      accumulator.mustHave.push(value);\r\n      //if the user indicates a mustHave exact value\r\n        if (isExact(value)) {\r\n          value = removeQuotesFrom(value);\r\n\r\n        accumulator.results = [...new Set([\r\n          ...accumulator.results,\r\n          ...getExactMatches(value, items, searchBy)\r\n        ])];\r\n        return accumulator;\r\n        }\r\n    }\r\n    //if it's not excluded and not exact\r\n  //new Set() pulls unique values\r\n  accumulator.results = [...new Set([\r\n    ...accumulator.results,\r\n    ...getMatches(value, items, searchBy, includePartial)\r\n  ])];\r\n}\r\n  return accumulator;\r\n}, {\r\n  mustHave: [],\r\n  results: [],\r\n  toFilterOut: []\r\n})\r\n\r\n//take each value in toFilterout\r\n//and get the objects that match it\r\nconst getToFilterOut = (array: string[], results: any[], searchBy: string[]) => array\r\n.map(value =>\r\n  isExact(value)\r\n  ? getExactMatches(removeQuotesFrom(value), results, searchBy)\r\n  : getMatches(value, results, searchBy))\r\n.reduce((acc, cur) => {\r\n  cur.forEach(c => acc.push(c));\r\n  return acc;\r\n}, [])\r\n\r\n//returns true if the value isEqual to some value in array\r\nconst isPresent = (value: string, array: string[]) =>\r\n!!(array.some(itemInArray =>\r\n  _.isEqual(value, itemInArray)))\r\n\r\n\r\nconst getItems = (items: any[]) => {\r\n  if (items && Array.isArray(items)) {\r\n    return items;\r\n} else {\r\n   return Object.keys(items).map((key: string) => {\r\n      return {\r\n        key,\r\n        //@ts-ignore\r\n        ...items[key]\r\n      };\r\n    })\r\n}}\r\n\r\nexport const match = ({\r\n  searchString,\r\n  exact,\r\n  includePartial,\r\n  items,\r\n  searchBy,\r\n  simpleReturn\r\n}: {\r\n    searchString: string,\r\n    exact ?: boolean\r\n    includePartial ?: boolean,\r\n    items: any,\r\n    searchBy ?: string[],\r\n    simpleReturn ?: string\r\n}) => {\r\n  if (!items) return;\r\n  items = getItems(items);\r\n\r\n  !searchBy && (searchBy = ['plain'])\r\n\r\n    const values = exact\r\n    ?[`\"${searchString}\"`]\r\n    : searchString\r\n    .split(\" \")\r\n    // eslint-disable-next-line\r\n    .filter(v => {\r\n        //@ts-ignore\r\n      if (v === 0 || v) {\r\n        return v;\r\n      }\r\n    });\r\n\r\n    //  console.log(`getting all results of `, values, items, searchBy);\r\n    let { results, mustHave, toFilterOut } = getAllResults(values, items, searchBy, includePartial);\r\n\r\n    toFilterOut =  getToFilterOut(toFilterOut, results, searchBy);\r\n\r\n    let finalResults = results\r\n    .filter(result => !isPresent(result, toFilterOut))\r\n\r\n    if (!!mustHave.length) {\r\n      mustHave.forEach(mustHaveString => {\r\n        /*if any item in finalResults is not in\r\n          getMatches(mustHaveString, finalResults))\r\n          then strip it out of finalResults*/\r\n          if (isExact(mustHaveString)) {\r\n            mustHaveString = removeQuotesFrom(mustHaveString);\r\n            finalResults = finalResults\r\n            //@ts-ignore\r\n            .filter(result => isPresent(result, getExactMatches(mustHaveString, finalResults, searchBy)))\r\n          } else {\r\n          finalResults = finalResults\r\n          //@ts-ignore\r\n          .filter(result => isPresent(result, getMatches(mustHaveString, finalResults, searchBy)))\r\n          }\r\n      })\r\n    }\r\n\r\nreturn simpleReturn\r\n  ? finalResults.map(result => result[simpleReturn])\r\n  : finalResults\r\n}\r\n","import { match } from '../Match';\r\nimport { ICondition, IInput, IExpression, IOperator, IParenthesis } from '../../types';\r\n\r\nexport const conditionValue = ({\r\n    conditionId,\r\n    expression,\r\n    inputs\r\n}: {\r\n    conditionId: string\r\n    expression: IExpression,\r\n    inputs: any[]\r\n}) => {\r\n    const condition = expression.find((item: ICondition | IParenthesis |IOperator) => {\r\n      if (item.itemType === 'condition') {\r\n          if (item.content.conditionId === conditionId) {\r\n              return true\r\n          } else return false;\r\n      } else return false;             \r\n});\r\n    \r\n    //@ts-ignore\r\n    const { id } = condition.content.target;\r\n    if (!id) return undefined;\r\n    if (!inputs || inputs.length === 0) return undefined;\r\n\r\n    const inputValue = inputs.find((input: IInput) => input.id === id).value;\r\n    //@ts-ignore\r\n    const matchType = condition.content.match.type;\r\n    //@ts-ignore\r\n    let { values } = condition.content.match;\r\n    \r\n    if (matchType === 'exact') {\r\n        if (!(!!values.length) || !inputValue) return false;\r\n        if (!!inputValue) {\r\n          const result = match({\r\n            searchString: inputValue,\r\n            items: values,\r\n            exact: true,\r\n            includePartial: false,\r\n            searchBy: undefined,\r\n            simpleReturn: undefined\r\n          })\r\n          return Array.isArray(result) ? !!result.length : false;  \r\n      }\r\n    } else if (matchType === 'none') {\r\n        return !(!!inputValue)\r\n      } else if (matchType === 'any') {\r\n        return !!inputValue\r\n      } else if (matchType === 'partialInclusive') {\r\n        if (!!inputValue) {\r\n            const result = match({\r\n              searchString: inputValue,\r\n              items: values,\r\n              exact: false,\r\n              includePartial: true,\r\n              searchBy: undefined,\r\n              simpleReturn: undefined\r\n            })\r\n            return Array.isArray(result) ? !!result.length : false;    \r\n      }\r\n    }\r\n      //multiSearch will return partial match or exact\r\n      //depending on what is specified\r\n      if (!!inputValue) {\r\n          const result = match({\r\n            searchString: inputValue,\r\n            exact: false,\r\n            includePartial: false,\r\n            items: values,\r\n            searchBy: undefined,\r\n            simpleReturn: undefined\r\n          })\r\n          return Array.isArray(result) ? !!result.length : false; \r\n      } else return false;    \r\n}\r\n","import { \r\n    ICondition,\r\n    IInput, \r\n    IExpression,\r\n    IParenthesis, \r\n    IOperator \r\n} from '../../types';\r\n\r\nimport { conditionValue } from '../ConditionValue';\r\n\r\nconst isCondition = ({itemType} : ICondition | IOperator | IParenthesis) => itemType === 'condition';\r\n\r\nconst isOperator = ({itemType}: ICondition | IOperator | IParenthesis) => itemType === 'operator';\r\n\r\nconst operatorIsNot = (item: ICondition | IOperator | IParenthesis) => {\r\n if (item.itemType === 'operator') {\r\n     if (item.content.operatorType === 'not') {\r\n         return true;\r\n     } else return false;\r\n } else return false;\r\n};\r\n\r\nconst isOpenParenthesis = (item : ICondition | IOperator | IParenthesis) => {\r\n    if (item.itemType === 'parenthesis') {\r\n        if (item.content.parenType === 'open') {\r\n            return true;\r\n        } else return false;\r\n    } else return false;\r\n}\r\n\r\nconst isCloseParenthesis = (item : ICondition | IOperator | IParenthesis) => {\r\n    if (item.itemType === 'parenthesis') {\r\n        if (item.content.parenType === 'close') {\r\n            return true;\r\n        } else return false;\r\n    } else {\r\n        return false;\r\n    } \r\n}\r\n\r\n\r\nconst precedence = ({content} : IOperator) => {\r\n    const operator = content.operatorType;\r\n    if (operator === 'not') return 2;\r\n    if (operator === 'and') return 1;\r\n    //if (operator === 'or') \r\n    return 0;\r\n}\r\n\r\nconst twoParameter = (op: IOperator, value?: boolean) => {\r\n    const operator = op.content.operatorType;\r\n    if (operator === 'not') {\r\n      return !value;\r\n    }\r\n  }\r\n\r\nconst threeParameter = ( op: IOperator, value1?: boolean, value2?: boolean) => {\r\n    const operator = op.content.operatorType;\r\n    if (operator === 'and') {\r\n    return !!value1 && !!value2;\r\n    } else if (operator === 'or') {\r\n    return !!value1 || !!value2;\r\n    }\r\n}\r\n\r\n\r\nexport const evaluateExpression = ({\r\n    expression, \r\n    inputs\r\n} : {\r\n    expression: IExpression,\r\n    inputs: IInput[]\r\n}) => {\r\n    // 1. While there are still tokens to be read in,\r\n    const { values, operators} = expression\r\n    //    1.1 Get the next token.\r\n    .reduce((acc: {\r\n        values: (boolean | undefined)[],\r\n        operators: IExpression\r\n    }, item) => {\r\n        const operators = acc.operators;\r\n        const values = acc.values;\r\n    //    1.2 If the token is:\r\n    //        1.2.1 A number: push it onto the value stack.\r\n    //        1.2.2 A variable: get its value, and push onto the value stack.\r\n    if (isCondition(item)) {\r\n        //@ts-ignore\r\n        const { conditionId }  = item.content;  \r\n        const value = conditionValue ({\r\n            conditionId,\r\n            expression,\r\n            inputs\r\n        })\r\n        values.push(value);\r\n        return acc;\r\n    }\r\n    //        1.2.3 A left parenthesis: push it onto the operator stack.\r\n    if (isOpenParenthesis(item)) {\r\n        operators.push(item);\r\n        return acc;\r\n    }\r\n    //        1.2.4 A right parenthesis:\r\n    if (isCloseParenthesis(item)) {\r\n        //          1 While the thing on top of the operator stack is not a \r\n        //            left parenthesis,\r\n        while (!!operators.length && !isOpenParenthesis(operators[operators.length -1])) {\r\n            //              1 Pop the operator from the operator stack.\r\n            const operator = operators.pop();\r\n            //              2 Pop the value stack twice, getting two operands.\r\n            //NOTE: values may be reversed\r\n            const value1 = values.pop();\r\n            \r\n            //              3 Apply the operator to the operands, in the correct order.\r\n            //              4 Push the result onto the value stack.\r\n            if (!!operator && operatorIsNot(operator)) {\r\n                const value = twoParameter(operator as IOperator, value1)\r\n                //if it's undefined, we should return unparseable expression message\r\n                values.push(value);;\r\n                \r\n            } else {\r\n                const value2 = values.pop();\r\n                const value = threeParameter(operator as IOperator, value1, value2);\r\n                //if it's undefined, we should return unparseable expression message\r\n                values.push(value);\r\n            }\r\n        }\r\n        //          2 Pop the left parenthesis from the operator stack, and discard it.\r\n        operators.pop()\r\n        return acc;\r\n    }\r\n    //        1.2.5 An operator (call it thisOp):\r\n    if (isOperator(item)) {\r\n        //          1 While the operator stack is not empty, and the top thing on the\r\n        //            operator stack has the same or greater precedence as thisOp,\r\n        while (!!values.length && \r\n            !!operators.length && \r\n            precedence(operators[operators.length -1] as IOperator) \r\n            >= precedence(item as IOperator)) {\r\n        //            1 Pop the operator from the operator stack.\r\n        //            2 Pop the value stack twice, getting two operands.\r\n        \r\n        const operator = operators.pop();\r\n        //              2 Pop the value stack twice, getting two operands.\r\n        const value1 = values.pop();\r\n        \r\n        if (operatorIsNot(operator as IOperator)) {\r\n            //              3 Apply the operator to the operands, in the correct order.\r\n            const value = twoParameter(operator as IOperator, value1)\r\n            //              4 Push the result onto the value stack.\r\n            values.push(value);\r\n            \r\n        } else {\r\n            const value2 = values.pop();\r\n            const value = threeParameter(operator as IOperator, value1, value2);\r\n            values.push(value)\r\n        }}\r\n\r\n        //          2 Push thisOp onto the operator stack.\r\n        operators.push(item);\r\n        return acc;\r\n    }\r\n    return acc;\r\n    }, {\r\n        values: [],\r\n        operators: []\r\n    })\r\n\r\n    // 2. While the operator stack is not empty,\r\n    while (!!operators.length) {\r\n        //     1 Pop the operator from the operator stack.\r\n        const operator = operators.pop();\r\n        //     2 Pop the value stack twice, getting two operands.\r\n        const value1 = values.pop();\r\n        if (operatorIsNot(operator as IOperator)) {\r\n            //              3 Apply the operator to the operands, in the correct order.\r\n            const value = twoParameter(operator as IOperator, value1)\r\n            //              4 Push the result onto the value stack.\r\n            values.push(value);\r\n            \r\n        } else {\r\n            const value2 = values.pop();\r\n            const value = threeParameter(operator as IOperator, value1, value2);\r\n            values.push(value)\r\n        } \r\n    }\r\n\r\n    while (values.length > 1) {\r\n        const value1 = values.pop();\r\n        const value2 = values.pop();\r\n        const value = value1 && value2;\r\n        values.push(value);\r\n    }\r\n\r\n    return values[0];\r\n}","import React, { useContext } from 'react';\r\nimport { Header, Label } from 'semantic-ui-react';\r\nimport { ExpressionContext } from '../../../../services/ExpressionContext'\r\nimport { getMatch } from '../../../../services/ParenthesisMatch';\r\nimport { InputContext } from '../../../../services/InputContext';\r\nimport { evaluateExpression } from '../../../../services/EvaluateExpression';\r\n\r\nconst Parenthesis = ({\r\n  parenthesis,\r\n  index,\r\n  changeOnRightClick,\r\n  doubleClickFn,\r\n  droppableId,\r\n  isDragging,\r\n  ...rest\r\n} : {\r\n  changeOnRightClick ?: boolean,\r\n  doubleClickFn ?: (droppableId: string, index: number) => void,\r\n  droppableId: string,\r\n  isDragging : boolean,\r\n  index: number,\r\n  parenthesis : {\r\n    highlight ?: boolean,\r\n    parenType: 'open' | 'close' | 'pair',\r\n  }\r\n}) => {\r\n  const { state, dispatch } = useContext(ExpressionContext);\r\n  const { expression } = state;\r\n  const { inputs } = useContext(InputContext).state;\r\n\r\n  const { parenType, highlight } = parenthesis;\r\n\r\n  const getContainedExpressionValue = (index: number, matchIndex: number) => {\r\n    const lower = Math.min(index, matchIndex) + 1;\r\n    const higher = Math.max(index, matchIndex);\r\n    const containedExpression = expression.slice(lower, higher);\r\n\r\n    const value = evaluateExpression({\r\n      expression: containedExpression,\r\n      inputs\r\n    })\r\n\r\n    return value;\r\n}\r\n  const getContent = () => {\r\n    if (parenType === 'close') return ')'\r\n    if (parenType === 'open') return '('\r\n    if (parenType === 'pair') return '()'\r\n  }\r\n\r\nconst getColor = () => {\r\n  if (droppableId !== 'expression') return 'yellow'\r\n\r\n  const matchIndex = getMatch(index, expression);\r\n  if (matchIndex === undefined) return 'grey'\r\n  if (highlight) return 'purple';\r\n\r\n  const containedExpressionValue = getContainedExpressionValue(index, matchIndex)  \r\n  if (containedExpressionValue === true) return 'green'\r\n  if (containedExpressionValue === false) return 'red'\r\n  return 'yellow'\r\n}\r\n\r\nconst handleMouseOver = () => {\r\nif (droppableId !== 'expression') return;\r\nif (highlight) return;\r\n\r\nconst match = getMatch(index, expression);\r\nmatch !== undefined &&\r\ndispatch({\r\n  type: 'highlight',\r\n  indexes: [index, match]\r\n})\r\n}\r\n\r\n//must spread {...rest} in order for instruction popup to function \r\n return (\r\n <Label size='large'\r\n            onContextMenu={(e: MouseEvent) => {\r\n                e.preventDefault();\r\n                if (!changeOnRightClick) return;\r\n              dispatch({\r\n                type: 'toggle',\r\n                payload: {\r\n                  droppableId,\r\n                  index\r\n                }\r\n              })\r\n            }}\r\n            onDoubleClick={() => !!doubleClickFn && doubleClickFn(droppableId, index)}\r\n            color={isDragging\r\n              ? 'green'\r\n              : getColor()\r\n            }\r\n            content={<Header as='h1' >{getContent()}</Header>}\r\n            onMouseOver={handleMouseOver}\r\n            onMouseLeave={() => !isDragging && dispatch({type: 'highlightCancel'})}\r\n          {...rest}\r\n          />\r\n)}\r\n\r\nexport default Parenthesis;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport { IAction } from '../../types';\r\nimport { loadInstructionState } from '../../services/Save' \r\n\r\nconst getState = () => {\r\n  const loaded = loadInstructionState();\r\n if (loaded.error) {\r\n   return true;\r\n }\r\n return loaded;\r\n}\r\nconst initialState: any = {\r\n    instructions: getState()\r\n}\r\n\r\n\r\n  let reducer = (state: any, action: IAction) => {\r\n    switch (action.type) {\r\n        case 'on':{\r\n            return {\r\n                instructions: true\r\n            }\r\n        }  \r\n      case 'off':{\r\n          return {\r\n              instructions: false\r\n          }\r\n      }\r\n      case 'toggle': {\r\n        const current = state.instructions;\r\n        return {\r\n          instructions: !current\r\n        }\r\n      }\r\n      default:\r\n        throw new Error();\r\n    }\r\n  }\r\n\r\n  const InstructionsContext = createContext(initialState);\r\n  const InstructionsProvider = (props: any) => {\r\n      const [state, dispatch] = useReducer(reducer, initialState);\r\nreturn (\r\n    <InstructionsContext.Provider value={{state, dispatch}}>\r\n    {props.children}\r\n  </InstructionsContext.Provider>\r\n)}\r\n\r\n  export { InstructionsContext, InstructionsProvider }","import React, { \r\n  Fragment, \r\n  ReactElement,\r\n  useContext \r\n} from 'react';\r\nimport {\r\n  Icon,\r\n  Label,\r\n  Popup \r\n} from 'semantic-ui-react';\r\nimport { InstructionsContext } from '../../services/InstructionsContext';\r\n\r\nconst WithInstructions = ({\r\n  child,\r\n  type\r\n}: {\r\n  child: ReactElement,\r\n  type: string\r\n}) => {\r\n  const { instructions } = useContext(InstructionsContext).state; \r\n\r\n    const content: {[key:string]:ReactElement | string} = {\r\n      addInput: `Add a new input`,\r\n      clear: `Clears the current expression and inputs.`,\r\n      condition: <Fragment>\r\n      <p>A condition.</p>\r\n      <span>Will turn <Label color='green'>green</Label> if it is currently true, and will turn <Label color='red'>red</Label> if it is false</span><br/>\r\n      <p>Right click to open and close the condition editor.</p>\r\n      <p>Drag to trash to delete.</p>\r\n      </Fragment>,\r\n      deleteInput: `Delete this input`,\r\n      editInputName: <Fragment>\r\n        <p>Change the name of this input.</p>\r\n        <p>Conditions that target this input will update automatically.</p>\r\n      </Fragment>,\r\n      editInputValue: `Type the desired value of the input here`,\r\n      example: `Loads an example expression and set of inputs.`,\r\n      inputs: <Fragment>\r\n        <p>Inputs have a name and value.</p>\r\n        <p>Inputs may be targeted by the conditions in your expression.</p>\r\n        <p>Conditions return true or false based on the value of the target input.</p>\r\n        <p>To change the value of an input, type in the box to the right of the name.</p>\r\n        <p>To change the name of an input, click the <Icon name='edit'/> icon to the left of the name.</p>\r\n      </Fragment>,\r\n      load: `Loads the saved expression and saved inputs.`,\r\n      newAnd: <Fragment>\r\n        <p>The logical and operator</p>\r\n        <p>Returns true if the expressions on both sides are true.</p>\r\n      </Fragment>,\r\n      newOr: <Fragment>\r\n        <p>The logical or operator</p>\r\n        <p>Returns true if at least one of the expressions on either side is true.</p>\r\n      </Fragment>,\r\n      newNot: <Fragment>\r\n        <p>The not operator.</p>\r\n        <p>Returns true if the expression to the right is false.</p>\r\n      </Fragment>,\r\n      newCondition: <Fragment>\r\n      A new condition. <br/>\r\n      Conditions are true or false depending on whether their target input matches the values in the condition.<br/>\r\n      A condition will turn <Label color='green'>green</Label> if it is currently true, and will turn <Label color='red'>red</Label> if it is false.<br/> \r\n      Right click on a condition in the expression to open the condition editor.<br/>\r\n      </Fragment>,\r\n      newParenthesisPair: `Inserts a pair of parentheses into the expresion.`,\r\n      newParenthesisOpen: `Inserts an open parenthesis into the expression.`,\r\n      newParenthesisClose: `Inserts a close parenthesis into the expression.`,\r\n      operator: <Fragment><p>Right click to cycle through operators</p><p>Double click to delete</p></Fragment>,\r\n      parenthesis: <Fragment><p>Right click to toggle.</p><p>Double click to delete.</p></Fragment>,\r\n      save: `Saves the current expression and the current inputs.`,\r\n      trash: `The trash. Drag components here to remove them from your expression.`\r\n    }\r\n  \r\n    return instructions\r\n    ? <Popup content={content[type]} \r\n      trigger={child}\r\n      />\r\n    : child\r\n  }\r\n\r\n\r\nexport default WithInstructions;","import React, { useContext } from 'react';\r\nimport { ExpressionContext } from '../../../../services/ExpressionContext';\r\nimport { Header, Label } from 'semantic-ui-react';\r\nimport { colors } from '../../../../types';\r\nimport Condition from '../Condition';\r\nimport Parenthesis from '../Parenthesis';\r\nimport { conditionValue } from '../../../../services/ConditionValue'\r\nimport { InputContext, } from '../../../../services/InputContext';\r\nimport WithInstructions from '../../../WithInstructions';\r\n\r\nconst capitalize = (string : string) => string.charAt(0).toUpperCase() + string.slice(1)\r\n\r\nconst DraggableContent = ({\r\n  droppableId,\r\n  item,\r\n  index,\r\n  isDragging,\r\n  changeOnRightClick,\r\n  doubleClickFn,\r\n}: {\r\n  doubleClickFn?: (droppableId: string, index: number) => void,\r\n  droppableId: string,\r\n  index: number,\r\n  item : any,\r\n  isDragging: boolean,\r\n  changeOnRightClick?: boolean,\r\n}) => {\r\n  const { expression } = useContext(ExpressionContext).state;\r\n  const { inputs } = useContext(InputContext).state;\r\n  const { dispatch } = useContext(ExpressionContext)\r\n\r\n  let color: keyof typeof colors | undefined = undefined;\r\n  let content: string | undefined | any = undefined;\r\n  let instructionType = '';\r\n\r\n  if (item.itemType === 'parenthesis') {\r\n    const child = \r\n    <Parenthesis\r\n    droppableId={droppableId}\r\n    parenthesis={item.content}\r\n    index={index}\r\n    changeOnRightClick={changeOnRightClick}\r\n    doubleClickFn={doubleClickFn}\r\n    isDragging={isDragging}\r\n    />\r\n\r\n    if (droppableId === 'expression' ) return child\r\n    else return <WithInstructions child={child} type={`newParenthesis${capitalize(item.content.parenType)}`}/>\r\n  } else {\r\n      if (item.itemType === 'condition') {\r\n        \r\n        const getColor = (conditionId: string) => {\r\n          const result = conditionValue({conditionId, expression, inputs})\r\n          if (result === undefined) return 'blue'\r\n          else return result ? 'green' : 'red'\r\n        }\r\n\r\n        color = getColor(item.content.conditionId)\r\n        content = <Condition condition={item.content}/>\r\n        instructionType = item.itemType;\r\n\r\n      } else if (item.itemType === 'conditionPlaceholder') {\r\n      \r\n        color = 'blue'\r\n        content = <Header as='h1'>Condition</Header>\r\n        instructionType = 'newCondition';\r\n     \r\n      } else if (item.itemType === 'operator') {\r\n     \r\n        color = 'orange'\r\n        content = <Header as='h1'>{item.content.operatorType}</Header>\r\n        instructionType = \r\n          droppableId === 'expression' \r\n            ? item.itemType \r\n            : `new${capitalize(item.content.operatorType)}`\r\n    }\r\n\r\n  const child = <Label size='large'\r\n    onContextMenu={(e: MouseEvent) => {\r\n        e.preventDefault();\r\n        if (!changeOnRightClick) return;\r\n      dispatch({\r\n        type: 'toggle',\r\n        payload: {\r\n          droppableId,\r\n          index\r\n        }\r\n      })\r\n    }}\r\n    onDoubleClick={() => !!doubleClickFn && doubleClickFn(droppableId, index)}\r\n    color={isDragging\r\n      ? 'green'\r\n      : color\r\n    }\r\n    content={content}\r\n  />\r\n\r\n  return <WithInstructions type={instructionType} child={child}/>\r\n}}\r\n\r\nexport default DraggableContent;","import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport DraggableContent from './components/DraggableContent';\r\nimport { \r\n  ICondition, \r\n  IOperator, \r\n  IParenthesis, \r\n  INewConditionPlaceholder, \r\n  INewParenthesis \r\n} from '../../types'\r\n\r\nconst MyDraggable = ({\r\n  item,\r\n  changeOnRightClick,\r\n  doubleClickFn,\r\n  droppableId,\r\n  draggableId,\r\n  index\r\n} :{\r\n  doubleClickFn?: (droppableId: string, index: number) => void,\r\n  droppableId: string,\r\n  changeOnRightClick?: boolean,\r\n  item: ICondition | IOperator | IParenthesis | INewConditionPlaceholder | INewParenthesis,\r\n  draggableId: string,\r\n  index: number,\r\n}) =>\r\n<Draggable\r\n  draggableId={draggableId}\r\n  index={index}\r\n  >\r\n  {(provided, snapshot) => (\r\n      <div\r\n        ref={provided.innerRef}\r\n        {...provided.draggableProps}\r\n        {...provided.dragHandleProps}\r\n      >\r\n        <DraggableContent\r\n          doubleClickFn={doubleClickFn}\r\n          droppableId={droppableId}\r\n          item={item}\r\n          index={index}\r\n          isDragging={snapshot.isDragging}\r\n          changeOnRightClick={changeOnRightClick}\r\n          />\r\n      </div>\r\n  )}\r\n</Draggable>\r\n\r\nexport default MyDraggable;\r\n","export const generateId = ({\r\n    item,\r\n    index,\r\n    toStringify\r\n  } : {\r\n    item: any,\r\n    index: number,\r\n    toStringify?: any\r\n  }) => {\r\n    const id : {\r\n        item: string,\r\n        index: number,\r\n        [key: string] : any\r\n    } = {\r\n        item: typeof(item) === 'string' ? item : JSON.stringify(item),\r\n        index\r\n    };\r\nif (toStringify) {\r\n        Object.keys(toStringify)\r\n            .forEach(key =>\r\n              id[key] = toStringify[key]\r\n            );\r\n    }\r\n     \r\n    return JSON.stringify(id);\r\n  };\r\n  ","import React, { ReactElement } from 'react';\r\nimport {\r\n  Header,\r\n  Segment\r\n} from 'semantic-ui-react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport MyDraggable from '../MyDraggable';\r\nimport { generateId } from './services/';\r\nimport { directions } from '../../types';\r\n\r\nconst MyDroppable = ({\r\n  droppableId,\r\n  direction,\r\n  doubleClickFn,\r\n  changeOnRightClick,\r\n  header,\r\n  height,\r\n  items,\r\n} : {\r\n  changeOnRightClick?: boolean,\r\n  direction?: keyof typeof directions,\r\n  doubleClickFn?: (droppableId: string, index: number) => void,\r\n  droppableId: string,\r\n  header?: string | ReactElement,\r\n  height?: number,\r\n  items: any[],\r\n}) =>\r\n<Droppable\r\n  droppableId={droppableId}\r\n  direction={direction ? direction : 'vertical'}>\r\n      {(provided, snapshot) => (\r\n        <Segment\r\n          style={{\r\n            overflow: 'auto',\r\n            height: height && height,\r\n            //maxHeight: 300\r\n                }}\r\n          color={snapshot.isDraggingOver\r\n          ? 'blue'\r\n          : undefined}\r\n          inverted={snapshot.isDraggingOver}\r\n          tertiary={snapshot.isDraggingOver}\r\n          >\r\n          <Header\r\n         as='h3'\r\n        >\r\n          {header}\r\n          </Header>\r\n        <div\r\n          style={direction === 'horizontal'\r\n          ? {display:'flex'}\r\n          : undefined}\r\n          ref={provided.innerRef}\r\n        >\r\n          {items && items\r\n          .map((item : any, index: number) =>\r\n            <MyDraggable\r\n            droppableId={droppableId}\r\n            doubleClickFn={doubleClickFn}\r\n            changeOnRightClick={changeOnRightClick}\r\n                item={item}\r\n                draggableId={generateId({\r\n                  item,\r\n                  index,\r\n                  toStringify: {\r\n                    droppableId\r\n                  }\r\n                })}\r\n                index={index}\r\n                key={generateId({\r\n                  item,\r\n                  index,\r\n                  toStringify: {\r\n                    droppableId\r\n                  }\r\n                })}\r\n            />\r\n          )}\r\n          {provided.placeholder}\r\n        </div>\r\n        </Segment>\r\n        )}\r\n    </Droppable>\r\n\r\nexport default MyDroppable;\r\n","import React, { useContext } from 'react';\r\nimport MyDroppable from '../MyDroppable';\r\nimport { ExpressionContext } from '../../services/ExpressionContext';\r\nimport { evaluateExpression } from '../../services/EvaluateExpression';\r\nimport { InputContext } from '../../services/InputContext';\r\nimport { parenthesisMatch } from '../../services/ParenthesisMatch';\r\nimport { IExpression } from '../../types';\r\n\r\nconst hasCondition = (expression : IExpression) => expression.some(item => item.itemType === 'condition')\r\nconst hasTarget = (expression: IExpression) => expression.some(item => item.itemType === 'condition' && !!item.content.target.id)\r\n\r\nconst Expression = () => {\r\nconst { dispatch } = useContext(ExpressionContext);\r\nconst { expression } = useContext(ExpressionContext).state;\r\nconst { inputs } = useContext(InputContext).state;\r\n\r\nconst matched = parenthesisMatch(expression);  \r\nconst noConditions = !hasCondition(expression);\r\nconst noTargets = !hasTarget(expression);\r\n\r\nconst value = evaluateExpression({\r\n  expression,\r\n  inputs\r\n})\r\nconst doubleClickFn = (droppableId: string, index: number) => {\r\n  if (expression[index].itemType !== 'condition') {\r\n    dispatch({\r\n      type: 'delete',\r\n      payload: {index}\r\n    })\r\n  }}\r\n\r\nreturn (\r\n<MyDroppable\r\nchangeOnRightClick={true}\r\ndoubleClickFn={doubleClickFn}\r\ndirection={'horizontal'}\r\ndroppableId={'expression'}\r\nheader={`Your Expression ${noConditions \r\n  ? `has no conditions` \r\n  : noTargets ? `has no valid targets`\r\n    : `is ${!matched \r\n      ? `unparseable due to mismatched parenthesis` \r\n      : value}`}`}\r\nheight={400}\r\nitems={expression}\r\n/>\r\n)}\r\n\r\nexport default Expression;\r\n","import React, { useContext } from 'react';\r\nimport MyDroppable from '../MyDroppable';\r\nimport { ExpressionContext } from '../../services/ExpressionContext';\r\nimport { INewComponents } from '../../types';\r\n\r\nconst newComponents: INewComponents = [\r\n      {\r\n          itemType: 'conditionPlaceholder',\r\n      },\r\n    {\r\n      itemType: 'parenthesis',\r\n      content: {\r\n        parenType: 'pair'\r\n      }\r\n    },\r\n    {\r\n      itemType: 'parenthesis',\r\n    content: {\r\n      parenType: 'open'\r\n    }\r\n  },\r\n    { itemType: 'parenthesis',\r\n    content: {\r\n      parenType: 'close'\r\n    }\r\n  },\r\n    {\r\n        itemType: 'operator',\r\n        content: {\r\n          operatorType: 'and'\r\n        }\r\n      },\r\n    {\r\n    itemType: 'operator',\r\n    content: {\r\n        operatorType: 'or'\r\n    }\r\n    },\r\n    {\r\n      itemType: 'operator',\r\n      content: {\r\n        operatorType: 'not'\r\n      }\r\n    },\r\n]\r\n\r\n\r\nconst NewComponents = () => {\r\n  const { dispatch } = useContext(ExpressionContext)\r\n  const doubleClickFn = (droppableId: string, index: number) => {\r\n      dispatch({\r\n        type: 'insertNew',\r\n        payload: {\r\n          item: newComponents[index]\r\n        }\r\n      })\r\n    }\r\n\r\n  return (\r\n    <MyDroppable\r\n    droppableId={'newComponents'}\r\n    direction={'horizontal'}\r\n    doubleClickFn={doubleClickFn}\r\n    header={`New Components - double click or drag and drop to add`}\r\n    height={200}\r\n    items={newComponents}\r\n    />\r\n  )}\r\n\r\n\r\nexport default NewComponents;\r\n","import React, { \r\n    Fragment, \r\n    useContext, \r\n    useState \r\n} from 'react';\r\nimport { InputContext } from '../../../../services/InputContext';\r\nimport { \r\n    Button,\r\n    Icon,\r\n    Input\r\n} from 'semantic-ui-react';\r\nimport { IInput } from '../../../../types';\r\nimport WithInstructions from '../../../WithInstructions';\r\n\r\nconst _InputName = ({\r\n    input, \r\n    index\r\n}:{\r\n    input:IInput, \r\n    index:number\r\n}) => {\r\nconst { dispatch } = useContext(InputContext);\r\nconst [open, setOpen] = useState(false);\r\nconst [temp, setTemp] = useState(input.name);\r\n\r\nconst handleBlur = (value:string) => {\r\n    setOpen(false);\r\n    dispatch({type: 'rename', name: value, index})\r\n}\r\n\r\nreturn open\r\n?   <Fragment>\r\n    <Button icon onClick={() => setOpen(!open)}><Icon name='edit'/></Button>\r\n        <Input \r\n        onKeyPress={({key}:{key: string}) => {\r\n            if (key === 'Enter') {\r\n                    \r\n                !!temp && handleBlur(temp)\r\n            }\r\n        }}\r\n            value={temp}\r\n            onChange={(e) => setTemp(e.target.value)}\r\n            onBlur={(e: any) => handleBlur(e.target.value)}\r\n\r\n        />\r\n    </Fragment>\r\n: <div>\r\n    <Button icon onClick={() => setOpen(!open)}><Icon name='edit'/></Button>\r\n    {input.name}:\r\n    </div>\r\n}\r\n\r\nconst InputName = (props: {\r\n    input: IInput, \r\n    index: number}) => \r\n<WithInstructions child={_InputName({...props})} type={'editInputName'}/>\r\n\r\nexport default InputName","import React, { useContext } from 'react';\r\nimport { \r\n    Button, \r\n    Grid, \r\n    Icon, \r\n    Header, \r\n    Input, \r\n    Segment \r\n} from 'semantic-ui-react';\r\nimport { InputContext } from '../../services/InputContext';\r\nimport { ExpressionContext } from '../../services/ExpressionContext';\r\nimport { IInput } from '../../types';\r\nimport InputName from './components/InputName';\r\nimport WithInstructions from '../WithInstructions';\r\n\r\nconst AddInputButton = ({\r\n    dispatch\r\n}:{\r\n    dispatch: ({type}: {type: string}) => void,\r\n}) => <WithInstructions child={<Button icon onClick={() => dispatch({type: 'new'})}><Icon name='plus'/></Button>} type={'addInput'} />\r\n\r\nconst DeleteInputButton = ({\r\n    dispatch,\r\n    id,\r\n    index\r\n}:{\r\n    dispatch: ({\r\n        type, \r\n        index\r\n    }: {\r\n        type: string,\r\n        index: number\r\n    }) => void,\r\n    id: string,\r\n    index: number,\r\n}) => {\r\n    const expressionDispatch = useContext(ExpressionContext).dispatch;\r\n\r\n    const child = \r\n    <Button icon \r\n    onClick={() => {\r\n        expressionDispatch({\r\n            type: 'deleteTarget',\r\n            id\r\n        })    \r\n        dispatch({\r\n            type:'delete', \r\n            index\r\n            })}\r\n    }>\r\n    <Icon name='minus'/>\r\n    </Button>\r\n\r\nreturn <WithInstructions child={child} type={'deleteInput'} />\r\n}\r\n \r\nconst _Inputs = () => {\r\n    const { dispatch } = useContext(InputContext);\r\n    const { inputs } = useContext(InputContext).state;\r\n    \r\nreturn <Segment>\r\n    <Header as='h2'>Inputs</Header>\r\n    <AddInputButton dispatch={dispatch} />\r\n     <br/><br/>\r\n    <Grid celled columns={2}>\r\n    {inputs\r\n.map((\r\n    input: IInput, \r\n    index: number\r\n    ) =>\r\n    <Grid.Row key={`inputRow${index}`}>\r\n    <Grid.Column style={{'textAlign':'right'}}>\r\n    <InputName input={input} index={index}/>\r\n    </Grid.Column>\r\n    <Grid.Column style={{'textAlign':'left'}}> \r\n        <Input \r\n        value={input.value}\r\n        key={`inputFor${input.id}`}\r\n        onChange={(e:any, {value}: {value: string}) => dispatch({\r\n            type: 'save',\r\n            index,\r\n            value\r\n        })}\r\n        placeholder={`Type value here...`}\r\n        />\r\n       <DeleteInputButton dispatch={dispatch} id={input.id} index={index}/>\r\n    </Grid.Column>\r\n    </Grid.Row>\r\n    )}\r\n </Grid>\r\n</Segment>\r\n}\r\n\r\nconst Inputs = () => <WithInstructions child={_Inputs()} type={'inputs'}/>\r\n\r\nexport default Inputs;\r\n\r\n","import React from 'react';\r\nimport { ExpressionProvider } from '../../services/ExpressionContext';\r\nimport { InputProvider } from '../../services/InputContext';\r\nimport { InstructionsProvider } from '../../services/InstructionsContext';\r\n\r\nconst Providers = (props: any) => \r\n<ExpressionProvider>\r\n<InputProvider>\r\n<InstructionsProvider\r\n{...props}\r\n/>\r\n</InputProvider>\r\n</ExpressionProvider>\r\n\r\nexport default Providers;","import React, { useState } from 'react';\r\nimport { \r\n    Button,\r\n    Grid,\r\n    Header,\r\n    Icon,\r\n    Input,\r\n    Label, \r\n    Segment \r\n} from 'semantic-ui-react';\r\nimport MatchTypePicker from '../../../MatchTypePicker';\r\nimport TargetPicker from '../../../TargetPicker';\r\nimport { IInput } from '../../../../types';\r\nimport { match } from '../../../../services/Match';\r\n\r\nconst conditionValue = ({\r\n    matchType,\r\n    values,\r\n    inputValue\r\n}:{\r\n    matchType: string,\r\n    values: string[],\r\n    inputValue?: string,\r\n}) => {\r\n    if (matchType === 'exact') {\r\n        if (!(!!values.length) || !inputValue) return false;\r\n        if (!!inputValue) {\r\n          const result = match({\r\n            searchString: inputValue,\r\n            items: values,\r\n            exact: true,\r\n            includePartial: false,\r\n            searchBy: undefined,\r\n            simpleReturn: undefined\r\n          })\r\n          return Array.isArray(result) ? !!result.length : false;  \r\n      }\r\n    } else if (matchType === 'none') {\r\n        return !(!!inputValue)\r\n      } else if (matchType === 'any') {\r\n        return !!inputValue\r\n      } else if (matchType === 'partialInclusive') {\r\n        if (!!inputValue) {\r\n            const result = match({\r\n              searchString: inputValue,\r\n              items: values,\r\n              exact: false,\r\n              includePartial: true,\r\n              searchBy: undefined,\r\n              simpleReturn: undefined\r\n            })\r\n            return Array.isArray(result) ? !!result.length : false;    \r\n      }\r\n    }\r\n      //multiSearch will return partial match or exact\r\n      //depending on what is specified\r\n      if (!!inputValue) {\r\n          const result = match({\r\n            searchString: inputValue,\r\n            exact: false,\r\n            includePartial: false,\r\n            items: values,\r\n            searchBy: undefined,\r\n            simpleReturn: undefined\r\n          })\r\n          return Array.isArray(result) ? !!result.length : false; \r\n      } else return false;   \r\n}\r\n\r\nconst ExampleCondition = ({\r\n    handleOpen,\r\n    inputs\r\n}: {\r\n    handleOpen: (open: boolean) => void,\r\n    inputs: IInput[]\r\n}) => {\r\nconst [open, setOpen] = useState(false)\r\nconst [matchType, setMatchType] = useState<string | undefined>(undefined);\r\nconst [targetId, setTargetId] = useState<string | undefined>(inputs[0] && inputs[0].id)\r\nconst selectMatchType =  (matchType: string | undefined) => setMatchType(matchType);\r\nconst [values, setValues] = useState<string[]>([])\r\n\r\nconst inputValue = inputs.find((input: IInput) => input.id === targetId) \r\n//@ts-ignore\r\n? inputs.find((input: IInput) => input.id === targetId).value\r\n: undefined; \r\n\r\nconsole.log(`matchType is ${matchType}, inputValue is ${inputValue}`)\r\nconst color = \r\nmatchType \r\n ? conditionValue({\r\n        matchType,\r\n        values,\r\n        inputValue\r\n        })\r\n    ? 'green'\r\n    : 'red'\r\n: 'blue'\r\n\r\nconst addValue = () => {\r\n    const newValues = [...values];\r\n    newValues.push('');\r\n    setValues(newValues);\r\n}\r\n\r\n\r\nconst deleteValue = (index: number) => {\r\n    const newValues = [...values];\r\n    newValues.splice(index, 1);\r\n    setValues(newValues);\r\n}\r\nreturn (\r\n<Label color={color}\r\n    onContextMenu={(e: any) => {e.preventDefault(); handleOpen(!open); setOpen(!open)}}\r\n    >\r\n    {open\r\n        ? <Segment style={{\r\n            color: 'black',\r\n            maxWidth: 500\r\n            }}>\r\n        <Grid celled columns={2}>\r\n            <Grid.Row>\r\n                <Grid.Column width={3}>\r\n                Target\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                <TargetPicker \r\n                 exampleValues={{targetId, setTargetId}}\r\n                /> \r\n                </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n            <Grid.Column width={3}>Match Type</Grid.Column>\r\n            <Grid.Column>\r\n            <MatchTypePicker exampleValues={{matchType, selectMatchType}}/>\r\n            </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n        <Grid.Column width={3}>\r\n        Values\r\n        <Button icon onClick={() => addValue()}><Icon name='add'/></Button>\r\n        </Grid.Column>\r\n        <Grid.Column>\r\n            {values \r\n            ? values.map((value: string, index: number) => \r\n                <div key={`exampleValue` + index.toString()}>{index + 1}. \r\n                <Input label={<Button icon onClick={() => deleteValue(index)}><Icon name='delete'/></Button>} labelPosition='right'/> \r\n                </div>)\r\n            : `No values`}\r\n        </Grid.Column>\r\n        </Grid.Row>\r\n        </Grid>\r\n        </Segment>\r\n        :<Header as='h1'>Condition</Header>\r\n        } \r\n</Label>\r\n)} \r\n\r\nexport default ExampleCondition;","import React, { useState } from 'react';\r\nimport { Label, Header } from 'semantic-ui-react';\r\n\r\nconst ExampleParenthesis = () => {\r\n    const [open, setOpen] = useState(true) \r\n    return (\r\n    <Label \r\n        color='yellow' \r\n        onContextMenu={(e: MouseEvent) => {\r\n            e.preventDefault();\r\n            setOpen(!open)}}\r\n            >\r\n    <Header as='h1'>{open ? '(' : ')'}</Header>\r\n    </Label> \r\n    )}\r\n\r\nexport default ExampleParenthesis;","import React, { useState } from 'react';\r\nimport { Label, Header } from 'semantic-ui-react';\r\n\r\nconst ExampleOperator = () => {\r\n    const [operator, setOperator] = useState('and');\r\n    const cycle = () => {\r\n        if (operator === 'and') setOperator('or');\r\n        else if (operator === 'or') setOperator('not');\r\n        else if (operator === 'not') setOperator('and'); \r\n    };\r\n    return (\r\n    <Label \r\n    color='orange'\r\n    onContextMenu={(e: MouseEvent) => {\r\n        e.preventDefault();\r\n        cycle();\r\n    }}>\r\n    <Header as='h1'>{operator}</Header></Label>\r\n    )}\r\n    \r\nexport default ExampleOperator;","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Icon,\r\n    Input\r\n} from 'semantic-ui-react';\r\nimport { IInput } from '../../../../types';\r\n\r\nconst ExampleInputs = ({\r\n    inputs,\r\n    addInput,\r\n    deleteInput,\r\n    setName,\r\n    setValue\r\n}: {\r\n    inputs: IInput[],\r\n    addInput: () => void,\r\n    deleteInput: (index: number) => void,\r\n    setName: ({index, name}:{index: number, name: string}) => void,\r\n    setValue: ({index, value}:{index: number, value: string}) => void\r\n}) => \r\n<Fragment>\r\n    <Button icon onClick={() => addInput()}><Icon name='plus'/></Button>\r\n    <br/><br/>\r\n    <Grid celled columns={2}>\r\n    {inputs\r\n.map((\r\n    input: IInput, \r\n    index: number\r\n    ) =>\r\n    <Grid.Row key={`inputRow${index}`}>\r\n    <Grid.Column style={{'textAlign':'right'}}>\r\n    <InputName input={input} index={index} setName={setName}/>\r\n    </Grid.Column>\r\n    <Grid.Column style={{'textAlign':'left'}}> \r\n        <Input \r\n        value={input.value}\r\n        key={`inputFor${input.id}`}\r\n        onChange={(e:any, {value}: {value: string}) => setValue({index, value})}\r\n        label={<Button icon onClick={() => deleteInput(index)}><Icon name='minus'/></Button>} \r\n        labelPosition='right'\r\n        /> \r\n    </Grid.Column>\r\n    </Grid.Row>\r\n    )}\r\n </Grid>\r\n </Fragment>\r\n\r\nexport default ExampleInputs;\r\n\r\nconst InputName = ({\r\n    input, \r\n    index,\r\n    setName\r\n}:{\r\n    input:IInput, \r\n    index:number,\r\n    setName: ({index, name}: {index: number, name: string}) => void\r\n}) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [temp, setTemp] = useState(input.name);\r\n    const handleBlur = (name:string) => {\r\n        setOpen(false);\r\n        setName({\r\n            index,\r\n            name\r\n        })\r\n    }\r\n    return open\r\n    ?   <Fragment>\r\n    <Button icon onClick={() => setOpen(!open)}><Icon name='edit'/></Button>\r\n    <Input \r\n    onKeyPress={({key}:{key: string}) => {\r\n        if (key === 'Enter') {\r\n             \r\n            !!temp && handleBlur(temp)\r\n        }\r\n    }}\r\n     value={temp}\r\n     onChange={(e) => setTemp(e.target.value)}\r\n     onBlur={(e: any) => handleBlur(e.target.value)}\r\n\r\n    />\r\n    </Fragment>\r\n    : <Fragment>\r\n        <Button icon onClick={() => setOpen(!open)}><Icon name='edit'/></Button>\r\n        {input.name}:\r\n        </Fragment>\r\n}\r\n","import React, { \r\n  useContext,\r\n  useState\r\n } from 'react';\r\nimport { \r\n    Button,\r\n    Divider,\r\n    Grid,\r\n    Header,\r\n    Icon,\r\n    Label,\r\n    List,\r\n    Modal,\r\n    Popup\r\n} from 'semantic-ui-react';\r\nimport ExampleCondition from './components/ExampleCondition';\r\nimport ExampleParenthesis from './components/ExampleParenthesis';\r\nimport ExampleOperator from './components/ExampleOperator';\r\nimport ExampleInputs from './components/ExampleInputs';\r\nimport { IInput } from '../../types';\r\nimport uuidv4 from 'uuid/v4';\r\nimport { InstructionsContext } from '../../services/InstructionsContext';\r\n\r\nconst InstructionsModal = () => {\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const [inputs, setInputs] = useState<IInput[]>([{\r\n      id: `1`,\r\n      name: `1`,\r\n      value: ``\r\n  }]);\r\n\r\n  const { instructions } = useContext(InstructionsContext).state; \r\n\r\nconst addInput = () => {\r\n  const input = {\r\n    id: uuidv4(),\r\n    name: getName((inputs.length + 1).toString()),\r\n    value: ``\r\n  }\r\n  const newInputs = [...inputs, input];\r\n  setInputs(newInputs);\r\n};\r\n\r\nconst deleteInput = (index: number) => {\r\n    const newInputs = [...inputs];\r\n    newInputs.splice(index, 1);\r\n    setInputs(newInputs);\r\n}\r\n\r\nconst getName = (name: string) => {    \r\n  if (inputs.some((input: IInput) => input.name === name)) {\r\n      name = getName((parseInt(name) + 1).toString())\r\n  } \r\n  return name;       \r\n}\r\n\r\nconst setName = ({index, name}: {index: number, name: string}) => {\r\n    const newInputs = [...inputs];\r\n    const target = inputs[index];\r\n    target.name = name;\r\n    setInputs(newInputs);\r\n}\r\n\r\nconst setValue = ({index, value} : {index: number, value: string}) => {\r\n  const newInputs = [...inputs];\r\n  const target = inputs[index];\r\n  target.value = value;\r\n  setInputs(newInputs);\r\n}\r\n\r\nconst triggerButton = <Button onClick={() => setModalOpen(!modalOpen)} circular icon='question'/>\r\n\r\nreturn(\r\n<Modal \r\nopen={modalOpen} \r\ntrigger={\r\n  instructions \r\n  ? <Popup trigger={triggerButton} content={`Opens the Instructions menu`}/> \r\n  : triggerButton} \r\n  onClose={() => setModalOpen(false)}\r\n  >\r\n<Modal.Header>Logical Expression Creator</Modal.Header>\r\n<Modal.Content scrolling>\r\n  <Modal.Description>\r\n      <Divider horizontal>\r\n    <Header>Drag and Drop components to create the desired logical expression</Header>\r\n    </Divider>\r\n    <Header as='h3'>Components</Header>\r\n    <Grid>\r\n    <Grid.Row>\r\n    <Grid.Column width={2} textAlign={'center'}>\r\n    <ExampleParenthesis/>\r\n    </Grid.Column>\r\n    <Grid.Column width={14} stretched>\r\n     Parenthesis allow you to specify the order of operations.<br/> \r\n     You must match pairs.<br/>\r\n     Unmatched parenthesis will turn grey.<br/>\r\n     Right click a parenthesis to toggle between open and close.<br/> \r\n     Hover over a parenthesis in your expression to highlight its match.<br/>\r\n     To remove parenthesis from the expression, double click it or drag it into the trash.\r\n    </Grid.Column>\r\n    </Grid.Row>\r\n    <Grid.Column width={2} textAlign={'center'}>\r\n    <ExampleOperator/> \r\n    </Grid.Column>\r\n    <Grid.Column width={14}>\r\n    The logical operators:\r\n    <List bulleted>\r\n    <List.Item>not</List.Item>\r\n    <List.Item>and</List.Item>\r\n    <List.Item>or</List.Item>\r\n    </List>\r\n    Right click an operator to cycle through the types. <br/>\r\n    To remove an operator from the expression, double click it or drag it into the trash.\r\n    </Grid.Column>\r\n    <Grid.Column width={open ? 12 : 4}>\r\n    <ExampleCondition inputs={inputs} handleOpen={(open: boolean) => setOpen(open)}/>\r\n    </Grid.Column>\r\n    <Grid.Column width={open ? 4 : 12}>\r\n    Conditions are true or false depending on whether their target input matches the values in the condition.<br/>\r\n    A condition will turn <Label color='green'>green</Label> if it is currently true, and will turn <Label color='red'>red</Label> if it is false.<br/> \r\n    Try changing the match type of the example condition to 'No value'. <br/>\r\n    Right click a condition to open the condition editor.<br/>\r\n    Inside the condition editor you can <br/>\r\n    <List bulleted>\r\n    <List.Item>Select the target input</List.Item>\r\n    <List.Item>The type of search that will determine if the target input matches the values</List.Item>\r\n    <List.Item>List the values that the target input will be matched to.</List.Item>\r\n    </List>\r\n    Double clicking an input will <b>not</b> remove it from the expression.<br/>\r\n    To remove a condition from the expression, drag it into the trash.\r\n    </Grid.Column>\r\n    </Grid>\r\n    <Divider horizontal>\r\n    <Header as='h3'>The Trash</Header>\r\n    </Divider>\r\n    <Grid>\r\n    <Grid.Column width={4}>\r\n    <Icon name='trash' size='massive' color='black'/>\r\n    </Grid.Column>\r\n    <Grid.Column width={12}>\r\n    Drag and drop components into the trash to remove them from the expression. <br/>\r\n    You can also double click on components to remove them from the expression, but this will not work on conditions.\r\n    </Grid.Column>        \r\n    </Grid>\r\n    <Divider horizontal>\r\n    <Header as='h3'>Inputs</Header>\r\n    </Divider>\r\n\r\n    Inputs are the targets of your conditions.<br/>\r\n    Inputs have a name and a value.<br/>\r\n    A condition that targets an input compares the value of the targeted input with the match type and values of the condition.<br/>\r\n    To change the value of an input, type the desired value in the box.<br/>\r\n    To change the name of an input, click the edit icon <Icon name='edit'/> to the left of the name, then type the desired name in the box.<br/>\r\n    To add a new input, click the <Icon name='plus'/> icon.<br/>\r\n    To delete an input, click the <Icon name='minus'/> icon next to the input.<br/>\r\n\r\n      <ExampleInputs \r\n    inputs={inputs}\r\n    addInput={addInput}\r\n    deleteInput={deleteInput}\r\n    setName={setName} \r\n    setValue={setValue}\r\n    />\r\n  </Modal.Description>\r\n</Modal.Content>\r\n</Modal>\r\n)}\r\n\r\n\r\nexport default InstructionsModal;\r\n\r\n\r\n\r\n\r\n","import React, { useContext } from 'react';\r\nimport { \r\n    Button, \r\n    Checkbox, \r\n    Popup,\r\n    Segment \r\n} from 'semantic-ui-react';\r\nimport InstructionsModal from '../InstructionsModal';\r\nimport { InstructionsContext } from '../../services/InstructionsContext';\r\nimport { ExpressionContext } from '../../services/ExpressionContext';\r\nimport { InputContext } from '../../services/InputContext';\r\nimport { saveState, loadState, saveInstructionState } from '../../services/Save'\r\nimport WithInstructions from '../WithInstructions';\r\nimport { examples } from '../../services/Examples';\r\n\r\nconst SaveLoad = () => {\r\n    const {state, dispatch} = useContext(InstructionsContext);\r\n    const { instructions } = state;\r\n    const { expression } = useContext(ExpressionContext).state;\r\n    const expressionDispatch = useContext(ExpressionContext).dispatch; \r\n    const { inputs } = useContext(InputContext).state;\r\n    const inputDispatch = useContext(InputContext).dispatch;\r\n\r\n    const handleClear = () => {\r\n        expressionDispatch({type: 'load', expression: []});\r\n        inputDispatch({type: 'load', inputs: []});\r\n    }\r\n\r\n    const handleLoad = () => {\r\n        const loadResult = loadState();\r\n        if (!!loadResult.error) {\r\n            console.error(loadResult.error)\r\n        } else {\r\n            console.log(JSON.stringify(loadResult))\r\n            expressionDispatch({type: 'load', expression: loadResult.expression});\r\n            inputDispatch({type: 'load', inputs: loadResult.inputs});\r\n        }        \r\n    }\r\n    \r\n    const handleSave = () => {\r\n        const saveResult = saveState({expression, inputs});\r\n        saveResult === true \r\n        ? console.log(`Saved!`)\r\n        : console.error(saveResult.error)\r\n    }\r\n\r\n    const loadExample = (exampleNumber: number) => {\r\n        const { expression, inputs } = examples[exampleNumber];\r\n        expressionDispatch({type: 'load', expression});\r\n        inputDispatch({type: 'load', inputs});\r\n    }\r\n    return (\r\n    <Segment>\r\n    <Popup \r\n    content={`Turns instruction popups ${instructions ? 'off' : 'on'}.`}\r\n    trigger ={\r\n        <Button onClick={() => {\r\n            saveInstructionState(!instructions);\r\n            dispatch({type: 'toggle'});\r\n        }}>\r\n            Helpful Popups: <Checkbox checked={instructions}/>\r\n        </Button>} \r\n    />\r\n        <InstructionsModal />\r\n        <WithInstructions child={<Button onClick={() => handleSave()}>Save</Button>} type='save'/>\r\n        <WithInstructions child={<Button onClick={() => handleLoad()}>Load</Button>} type='load'/>\r\n        <WithInstructions child={<Button onClick={() => loadExample(0)}>Example 1</Button>} type='example'/>\r\n        <WithInstructions child={<Button onClick={() => loadExample(1)}>Example 2</Button>} type='example'/>\r\n        <WithInstructions child={<Button onClick={() => loadExample(2)}>Example 3</Button>} type='example'/>\r\n        <WithInstructions child={<Button onClick={() => handleClear()}>Clear</Button>} type='clear'/>\r\n    </Segment>\r\n    )\r\n}\r\n\r\nexport default SaveLoad;","import React from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { Icon, Segment } from 'semantic-ui-react';\r\nimport WithInstructions from '../WithInstructions';\r\n\r\nconst _Trash = () => \r\n  <div>\r\n<Droppable\r\n  droppableId={'trash'}\r\n>\r\n  {(provided, snapshot) => (\r\n    <Segment\r\n      style={{\r\n        overflow: 'auto',\r\n            }}\r\n      color={snapshot.isDraggingOver\r\n      ? 'blue'\r\n      : undefined}\r\n      inverted={snapshot.isDraggingOver}\r\n      tertiary={snapshot.isDraggingOver}\r\n      >\r\n    <div\r\n      ref={provided.innerRef}\r\n    > \r\n    <Icon name='trash' size='massive'/>\r\n      {provided.placeholder}\r\n    </div>\r\n    </Segment>\r\n    )}\r\n</Droppable>\r\n</div>\r\n\r\n\r\nconst Trash = () => <WithInstructions child={_Trash()} type={'trash'}/>\r\n\r\nexport default Trash;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport DragDropContext from './components/DragDropContextWithDispatch'\r\nimport Expression from './components/Expresssion';\r\nimport Insertables from './components/Insertables';\r\nimport Inputs from './components/Inputs';\r\nimport Providers from './components/Providers';\r\nimport SaveLoad from './components/SaveLoad';\r\nimport Trash from './components/Trash';\r\n\r\nconst App = () =>\r\n  <div className=\"App\">\r\n  <Providers>    \r\n    <DragDropContext>\r\n    <SaveLoad/>\r\n      <Expression />\r\n      <Grid columns='equal'>\r\n      <Grid.Row>\r\n      <Grid.Column>\r\n      <Inputs/>\r\n      </Grid.Column>\r\n      <Grid.Column>\r\n        <Insertables/>\r\n        <Trash/>\r\n      </Grid.Column>\r\n      </Grid.Row>    \r\n      </Grid>\r\n      </DragDropContext>\r\n      </Providers>\r\n  </div>\r\n\r\nexport default App;\r\n\r\n\r\n// const App = () =>\r\n//   <div className=\"App\">\r\n//     <ItemProvider>\r\n//       <InputProvider>\r\n//     <DragDropContext>\r\n//     <SaveLoad/>\r\n//       <Grid columns='equal'>\r\n//       <Grid.Column>\r\n//         <Grid.Row>\r\n//         <Expression />\r\n//         </Grid.Row>\r\n//         <Grid.Row>\r\n//           <Inputs/>\r\n//         </Grid.Row>\r\n//           </Grid.Column>\r\n//           <Grid.Column>\r\n//             <Grid.Row>\r\n//               <Insertables/>\r\n//             </Grid.Row>\r\n//             <Grid.Row>\r\n//               <Trash/>\r\n//             </Grid.Row>\r\n//           </Grid.Column>\r\n//       </Grid>\r\n//       </DragDropContext>\r\n//       </InputProvider>\r\n//     </ItemProvider>\r\n//   </div>\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}